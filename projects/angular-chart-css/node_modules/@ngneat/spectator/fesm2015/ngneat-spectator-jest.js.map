{"version":3,"file":"ngneat-spectator-jest.js","sources":["../../../projects/spectator/jest/src/lib/mock.ts","../../../projects/spectator/jest/src/lib/spectator.ts","../../../projects/spectator/jest/src/lib/spectator-http.ts","../../../projects/spectator/jest/src/lib/spectator-directive.ts","../../../projects/spectator/jest/src/lib/spectator-service.ts","../../../projects/spectator/jest/src/lib/spectator-host.ts","../../../projects/spectator/jest/src/lib/spectator-routing.ts","../../../projects/spectator/jest/src/lib/spectator-pipe.ts","../../../projects/spectator/jest/src/public_api.ts","../../../projects/spectator/jest/src/ngneat-spectator-jest.ts"],"sourcesContent":["import { FactoryProvider, AbstractType, Type } from '@angular/core';\nimport { installProtoMethods, CompatibleSpy, SpyObject as BaseSpyObject } from '@ngneat/spectator';\n\nexport type SpyObject<T> = BaseSpyObject<T> & { [P in keyof T]: T[P] & (T[P] extends (...args: any[]) => infer R ? jest.Mock<R> : T[P]) };\n\n/**\n * @publicApi\n */\nexport function createSpyObject<T>(type: Type<T> | AbstractType<T>, template?: Partial<Record<keyof T, any>>): SpyObject<T> {\n  const mock: any = { ...template } || {};\n\n  installProtoMethods(mock, type.prototype, () => {\n    const jestFn = jest.fn();\n    const newSpy: CompatibleSpy = jestFn as any;\n\n    newSpy.andCallFake = (fn: Function) => {\n      jestFn.mockImplementation(fn as (...args: any[]) => any);\n\n      return newSpy;\n    };\n\n    newSpy.andReturn = (val: any) => {\n      jestFn.mockReturnValue(val);\n    };\n\n    newSpy.reset = () => {\n      jestFn.mockReset();\n    };\n\n    return newSpy;\n  });\n\n  return mock;\n}\n\n/**\n * @publicApi\n */\nexport function mockProvider<T>(type: Type<T> | AbstractType<T>, properties?: Partial<Record<keyof T, any>>): FactoryProvider {\n  return {\n    provide: type,\n    useFactory: () => createSpyObject(type, properties)\n  };\n}\n","import { Type } from '@angular/core';\nimport {\n  createComponentFactory as baseCreateComponentFactory,\n  isType,\n  Spectator as BaseSpectator,\n  SpectatorOptions,\n  SpectatorOverrides,\n  Token\n} from '@ngneat/spectator';\n\nimport { mockProvider, SpyObject } from './mock';\n\n/**\n * @publicApi\n */\nexport type SpectatorFactory<C> = (options?: SpectatorOverrides<C>) => Spectator<C>;\n\nexport function createComponentFactory<C>(typeOrOptions: SpectatorOptions<C> | Type<C>): SpectatorFactory<C> {\n  return baseCreateComponentFactory({\n    mockProvider,\n    ...(isType(typeOrOptions) ? { component: typeOrOptions } : typeOrOptions)\n  }) as SpectatorFactory<C>;\n}\n\nexport class Spectator<C> extends BaseSpectator<C> {\n  public inject<T>(token: Token<T>, fromComponentInjector: boolean = false): SpyObject<T> {\n    return super.inject(token, fromComponentInjector) as SpyObject<T>;\n  }\n}\n","import { Type } from '@angular/core';\nimport {\n  createHttpFactory as baseCreateHttpFactory,\n  isType,\n  CreateHttpOverrides,\n  HttpMethod,\n  SpectatorHttp as BaseSpectatorHttp,\n  SpectatorHttpOptions,\n  Token\n} from '@ngneat/spectator';\n\nimport { mockProvider, SpyObject } from './mock';\n\n/**\n * @publicApi\n */\nexport interface SpectatorHttp<S> extends BaseSpectatorHttp<S> {\n  inject<T>(token: Token<T>): SpyObject<T>;\n}\n\n/**\n * @publicApi\n */\nexport { HttpMethod };\n\n/**\n * @pubicApi\n */\nexport type SpectatorHttpFactory<S> = (overrides?: CreateHttpOverrides<S>) => SpectatorHttp<S>;\n\n/**\n * @publicApi\n */\nexport function createHttpFactory<S>(typeOrOptions: SpectatorHttpOptions<S> | Type<S>): SpectatorHttpFactory<S> {\n  return baseCreateHttpFactory({\n    mockProvider,\n    ...(isType(typeOrOptions) ? { service: typeOrOptions } : typeOrOptions)\n  }) as SpectatorHttpFactory<S>;\n}\n","import { Type } from '@angular/core';\nimport {\n  createDirectiveFactory as baseCreateDirectiveFactory,\n  isType,\n  HostComponent,\n  SpectatorDirective as BaseSpectatorDirective,\n  SpectatorDirectiveOptions,\n  SpectatorDirectiveOverrides,\n  Token\n} from '@ngneat/spectator';\n\nimport { mockProvider, SpyObject } from './mock';\n\n/**\n * @publicApi\n */\nexport class SpectatorDirective<D, H = HostComponent> extends BaseSpectatorDirective<D, H> {\n  public inject<T>(token: Token<T>, fromComponentInjector: boolean = false): SpyObject<T> {\n    return super.inject(token, fromComponentInjector) as SpyObject<T>;\n  }\n}\n\n/**\n * @publicApi\n */\nexport type SpectatorDirectiveFactory<D, H = HostComponent> = <HP>(\n  template: string,\n  overrides?: SpectatorDirectiveOverrides<D, H, HP>\n) => SpectatorDirective<D, H & HostComponent extends H ? HP : unknown>;\n\n/**\n * @publicApi\n */\nexport type PresetSpectatorDirectiveFactory<D, H> = <HP>(\n  template?: string,\n  overrides?: SpectatorDirectiveOverrides<D, H, HP>\n) => SpectatorDirective<D, H & HostComponent extends H ? HP : unknown>;\n\n/**\n * @publicApi\n */\nexport function createDirectiveFactory<D, H = HostComponent>(\n  options: SpectatorDirectiveOptions<D, H> & { template: string }\n): PresetSpectatorDirectiveFactory<D, H>;\n/**\n * @publicApi\n */\nexport function createDirectiveFactory<D, H = HostComponent>(\n  typeOrOptions: Type<D> | SpectatorDirectiveOptions<D, H>\n): SpectatorDirectiveFactory<D, H>;\nexport function createDirectiveFactory<D, H = HostComponent>(\n  typeOrOptions: Type<D> | SpectatorDirectiveOptions<D, H>\n): SpectatorDirectiveFactory<D, H> {\n  return baseCreateDirectiveFactory({\n    mockProvider,\n    ...(isType(typeOrOptions) ? { directive: typeOrOptions } : typeOrOptions)\n  }) as SpectatorDirectiveFactory<D, H>;\n}\n","import { Type, InjectionToken, AbstractType } from '@angular/core';\nimport {\n  createServiceFactory as baseCreateServiceFactory,\n  isType,\n  SpectatorServiceOverrides,\n  SpectatorServiceOptions,\n  SpectatorService as BaseSpectatorService,\n  Token\n} from '@ngneat/spectator';\n\nimport { mockProvider, SpyObject } from './mock';\n\n/**\n * @publicApi\n */\nexport interface SpectatorService<S> extends BaseSpectatorService<S> {\n  inject<T>(token: Type<T> | InjectionToken<T> | AbstractType<T>): SpyObject<T>;\n}\n\n/**\n * @publicApi\n */\nexport type SpectatorServiceFactory<S> = (overrides?: SpectatorServiceOverrides<S>) => SpectatorService<S>;\n\n/**\n * @publicApi\n */\nexport function createServiceFactory<S>(typeOrOptions: SpectatorServiceOptions<S> | Type<S>): SpectatorServiceFactory<S> {\n  return baseCreateServiceFactory({\n    mockProvider,\n    ...(isType(typeOrOptions) ? { service: typeOrOptions } : typeOrOptions)\n  }) as SpectatorServiceFactory<S>;\n}\n","import { Type } from '@angular/core';\nimport {\n  createHostFactory as baseCreateHostFactory,\n  isType,\n  HostComponent,\n  SpectatorHost as BaseSpectatorHost,\n  SpectatorHostOptions,\n  SpectatorHostOverrides,\n  Token\n} from '@ngneat/spectator';\n\nimport { mockProvider, SpyObject } from './mock';\n\n/**\n * @publicApi\n */\nexport class SpectatorHost<C, H = HostComponent> extends BaseSpectatorHost<C, H> {\n  public inject<T>(token: Token<T>, fromComponentInjector: boolean = false): SpyObject<T> {\n    return super.inject(token, fromComponentInjector) as SpyObject<T>;\n  }\n}\n\n/**\n * @publicApi\n */\nexport type SpectatorHostFactory<C, H> = <HP>(\n  template: string,\n  overrides?: SpectatorHostOverrides<C, H, HP>\n) => SpectatorHost<C, H & HostComponent extends H ? HP : unknown>;\n\n/**\n * @publicApi\n */\nexport type PresetSpectatorHostFactory<C, H> = <HP>(\n  template?: string,\n  overrides?: SpectatorHostOverrides<C, H, HP>\n) => SpectatorHost<C, H & (HostComponent extends H ? HP : unknown)>;\n\n/**\n * @publicApi\n */\nexport function createHostFactory<C, H = HostComponent>(\n  options: SpectatorHostOptions<C, H> & { template: string }\n): PresetSpectatorHostFactory<C, H>;\n/**\n * @publicApi\n */\nexport function createHostFactory<C, H = HostComponent>(typeOrOptions: Type<C> | SpectatorHostOptions<C, H>): SpectatorHostFactory<C, H>;\nexport function createHostFactory<C, H = HostComponent>(typeOrOptions: Type<C> | SpectatorHostOptions<C, H>): SpectatorHostFactory<C, H> {\n  return baseCreateHostFactory({\n    mockProvider,\n    ...(isType(typeOrOptions) ? { component: typeOrOptions } : typeOrOptions)\n  }) as SpectatorHostFactory<C, H>;\n}\n","import { Type } from '@angular/core';\nimport {\n  createRoutingFactory as baseCreateRoutingFactory,\n  isType,\n  SpectatorRouting as BaseSpectatorRouting,\n  SpectatorRoutingOptions,\n  SpectatorRoutingOverrides,\n  Token\n} from '@ngneat/spectator';\n\nimport { mockProvider, SpyObject } from './mock';\n\n/**\n * @publicApi\n */\nexport class SpectatorRouting<C> extends BaseSpectatorRouting<C> {\n  public inject<T>(token: Token<T>, fromComponentInjector: boolean = false): SpyObject<T> {\n    return super.inject(token, fromComponentInjector) as SpyObject<T>;\n  }\n}\n\n/**\n * @publicApi\n */\nexport type SpectatorRoutingFactory<C> = (overrides?: SpectatorRoutingOverrides<C>) => SpectatorRouting<C>;\n\n/**\n * @publicApi\n */\nexport function createRoutingFactory<C>(typeOrOptions: SpectatorRoutingOptions<C> | Type<C>): SpectatorRoutingFactory<C> {\n  return baseCreateRoutingFactory({\n    mockProvider,\n    ...(isType(typeOrOptions) ? { component: typeOrOptions } : typeOrOptions)\n  }) as SpectatorRoutingFactory<C>;\n}\n","import { Type } from '@angular/core';\nimport {\n  createPipeFactory as baseCreatePipeFactory,\n  isType,\n  HostComponent,\n  SpectatorPipe as BaseSpectatorPipe,\n  SpectatorPipeOptions,\n  SpectatorPipeOverrides,\n  Token\n} from '@ngneat/spectator';\n\nimport { mockProvider, SpyObject } from './mock';\n\n/**\n * @publicApi\n */\nexport class SpectatorPipe<P, H = HostComponent> extends BaseSpectatorPipe<P, H> {\n  public inject<T>(token: Token<T>): SpyObject<T> {\n    return super.inject(token) as SpyObject<T>;\n  }\n}\n\n/**\n * @publicApi\n */\nexport type SpectatorPipeFactory<P, H> = <HP>(\n  templateOrOverrides?: string | SpectatorPipeOverrides<H, HP>,\n  overrides?: SpectatorPipeOverrides<H, HP>\n) => SpectatorPipe<P, H & (HostComponent extends H ? HP : unknown)>;\n\n/**\n * @publicApi\n */\nexport function createPipeFactory<P, H = HostComponent>(typeOrOptions: Type<P> | SpectatorPipeOptions<P, H>): SpectatorPipeFactory<P, H> {\n  return baseCreatePipeFactory({\n    mockProvider,\n    ...(isType(typeOrOptions) ? { pipe: typeOrOptions } : typeOrOptions)\n  }) as SpectatorPipeFactory<P, H>;\n}\n","/// <reference types=\"jest\" />\n/// <reference path=\"./lib/matchers-types.ts\" />\nexport * from './lib/dom-selectors';\nexport * from './lib/mock';\nexport * from './lib/spectator';\nexport * from './lib/spectator-http';\nexport * from './lib/spectator-directive';\nexport * from './lib/spectator-service';\nexport * from './lib/spectator-host';\nexport * from './lib/spectator-routing';\nexport * from './lib/spectator-pipe';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["baseCreateComponentFactory","BaseSpectator","baseCreateHttpFactory","BaseSpectatorDirective","baseCreateDirectiveFactory","baseCreateServiceFactory","BaseSpectatorHost","baseCreateHostFactory","BaseSpectatorRouting","baseCreateRoutingFactory","BaseSpectatorPipe","baseCreatePipeFactory"],"mappings":"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"}