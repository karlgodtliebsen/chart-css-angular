{"version":3,"sources":["../../../projects/spectator/jest/src/lib/mock.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/spectator/jest/src/lib/spectator.ts","../../../projects/spectator/jest/src/lib/spectator-directive.ts","../../../projects/spectator/jest/src/lib/spectator-host.ts","../../../projects/spectator/jest/src/lib/spectator-routing.ts","../../../projects/spectator/jest/src/lib/spectator-pipe.ts","../../../projects/spectator/jest/src/lib/spectator-http.ts","../../../projects/spectator/jest/src/lib/spectator-service.ts"],"names":["createSpyObject","type","template","mock","Object","assign","installProtoMethods","prototype","jestFn","jest","fn","newSpy","andCallFake","mockImplementation","andReturn","val","mockReturnValue","reset","mockReset","mockProvider","properties","provide","useFactory","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","call","__extends","TypeError","String","__","this","constructor","create","Spectator","_super","inject","token","fromComponentInjector","BaseSpectator","SpectatorDirective","BaseSpectatorDirective","SpectatorHost","BaseSpectatorHost","SpectatorRouting","BaseSpectatorRouting","SpectatorPipe","BaseSpectatorPipe","typeOrOptions","baseCreateComponentFactory","isType","component","baseCreateDirectiveFactory","directive","baseCreateHostFactory","baseCreateHttpFactory","service","baseCreatePipeFactory","pipe","baseCreateRoutingFactory","baseCreateServiceFactory"],"mappings":"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","sourcesContent":["import { FactoryProvider, AbstractType, Type } from '@angular/core';\nimport { installProtoMethods, CompatibleSpy, SpyObject as BaseSpyObject } from '@ngneat/spectator';\n\nexport type SpyObject<T> = BaseSpyObject<T> & { [P in keyof T]: T[P] & (T[P] extends (...args: any[]) => infer R ? jest.Mock<R> : T[P]) };\n\n/**\n * @publicApi\n */\nexport function createSpyObject<T>(type: Type<T> | AbstractType<T>, template?: Partial<Record<keyof T, any>>): SpyObject<T> {\n  const mock: any = { ...template } || {};\n\n  installProtoMethods(mock, type.prototype, () => {\n    const jestFn = jest.fn();\n    const newSpy: CompatibleSpy = jestFn as any;\n\n    newSpy.andCallFake = (fn: Function) => {\n      jestFn.mockImplementation(fn as (...args: any[]) => any);\n\n      return newSpy;\n    };\n\n    newSpy.andReturn = (val: any) => {\n      jestFn.mockReturnValue(val);\n    };\n\n    newSpy.reset = () => {\n      jestFn.mockReset();\n    };\n\n    return newSpy;\n  });\n\n  return mock;\n}\n\n/**\n * @publicApi\n */\nexport function mockProvider<T>(type: Type<T> | AbstractType<T>, properties?: Partial<Record<keyof T, any>>): FactoryProvider {\n  return {\n    provide: type,\n    useFactory: () => createSpyObject(type, properties)\n  };\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Type } from '@angular/core';\nimport {\n  createComponentFactory as baseCreateComponentFactory,\n  isType,\n  Spectator as BaseSpectator,\n  SpectatorOptions,\n  SpectatorOverrides,\n  Token\n} from '@ngneat/spectator';\n\nimport { mockProvider, SpyObject } from './mock';\n\n/**\n * @publicApi\n */\nexport type SpectatorFactory<C> = (options?: SpectatorOverrides<C>) => Spectator<C>;\n\nexport function createComponentFactory<C>(typeOrOptions: SpectatorOptions<C> | Type<C>): SpectatorFactory<C> {\n  return baseCreateComponentFactory({\n    mockProvider,\n    ...(isType(typeOrOptions) ? { component: typeOrOptions } : typeOrOptions)\n  }) as SpectatorFactory<C>;\n}\n\nexport class Spectator<C> extends BaseSpectator<C> {\n  public inject<T>(token: Token<T>, fromComponentInjector: boolean = false): SpyObject<T> {\n    return super.inject(token, fromComponentInjector) as SpyObject<T>;\n  }\n}\n","import { Type } from '@angular/core';\nimport {\n  createDirectiveFactory as baseCreateDirectiveFactory,\n  isType,\n  HostComponent,\n  SpectatorDirective as BaseSpectatorDirective,\n  SpectatorDirectiveOptions,\n  SpectatorDirectiveOverrides,\n  Token\n} from '@ngneat/spectator';\n\nimport { mockProvider, SpyObject } from './mock';\n\n/**\n * @publicApi\n */\nexport class SpectatorDirective<D, H = HostComponent> extends BaseSpectatorDirective<D, H> {\n  public inject<T>(token: Token<T>, fromComponentInjector: boolean = false): SpyObject<T> {\n    return super.inject(token, fromComponentInjector) as SpyObject<T>;\n  }\n}\n\n/**\n * @publicApi\n */\nexport type SpectatorDirectiveFactory<D, H = HostComponent> = <HP>(\n  template: string,\n  overrides?: SpectatorDirectiveOverrides<D, H, HP>\n) => SpectatorDirective<D, H & HostComponent extends H ? HP : unknown>;\n\n/**\n * @publicApi\n */\nexport type PresetSpectatorDirectiveFactory<D, H> = <HP>(\n  template?: string,\n  overrides?: SpectatorDirectiveOverrides<D, H, HP>\n) => SpectatorDirective<D, H & HostComponent extends H ? HP : unknown>;\n\n/**\n * @publicApi\n */\nexport function createDirectiveFactory<D, H = HostComponent>(\n  options: SpectatorDirectiveOptions<D, H> & { template: string }\n): PresetSpectatorDirectiveFactory<D, H>;\n/**\n * @publicApi\n */\nexport function createDirectiveFactory<D, H = HostComponent>(\n  typeOrOptions: Type<D> | SpectatorDirectiveOptions<D, H>\n): SpectatorDirectiveFactory<D, H>;\nexport function createDirectiveFactory<D, H = HostComponent>(\n  typeOrOptions: Type<D> | SpectatorDirectiveOptions<D, H>\n): SpectatorDirectiveFactory<D, H> {\n  return baseCreateDirectiveFactory({\n    mockProvider,\n    ...(isType(typeOrOptions) ? { directive: typeOrOptions } : typeOrOptions)\n  }) as SpectatorDirectiveFactory<D, H>;\n}\n","import { Type } from '@angular/core';\nimport {\n  createHostFactory as baseCreateHostFactory,\n  isType,\n  HostComponent,\n  SpectatorHost as BaseSpectatorHost,\n  SpectatorHostOptions,\n  SpectatorHostOverrides,\n  Token\n} from '@ngneat/spectator';\n\nimport { mockProvider, SpyObject } from './mock';\n\n/**\n * @publicApi\n */\nexport class SpectatorHost<C, H = HostComponent> extends BaseSpectatorHost<C, H> {\n  public inject<T>(token: Token<T>, fromComponentInjector: boolean = false): SpyObject<T> {\n    return super.inject(token, fromComponentInjector) as SpyObject<T>;\n  }\n}\n\n/**\n * @publicApi\n */\nexport type SpectatorHostFactory<C, H> = <HP>(\n  template: string,\n  overrides?: SpectatorHostOverrides<C, H, HP>\n) => SpectatorHost<C, H & HostComponent extends H ? HP : unknown>;\n\n/**\n * @publicApi\n */\nexport type PresetSpectatorHostFactory<C, H> = <HP>(\n  template?: string,\n  overrides?: SpectatorHostOverrides<C, H, HP>\n) => SpectatorHost<C, H & (HostComponent extends H ? HP : unknown)>;\n\n/**\n * @publicApi\n */\nexport function createHostFactory<C, H = HostComponent>(\n  options: SpectatorHostOptions<C, H> & { template: string }\n): PresetSpectatorHostFactory<C, H>;\n/**\n * @publicApi\n */\nexport function createHostFactory<C, H = HostComponent>(typeOrOptions: Type<C> | SpectatorHostOptions<C, H>): SpectatorHostFactory<C, H>;\nexport function createHostFactory<C, H = HostComponent>(typeOrOptions: Type<C> | SpectatorHostOptions<C, H>): SpectatorHostFactory<C, H> {\n  return baseCreateHostFactory({\n    mockProvider,\n    ...(isType(typeOrOptions) ? { component: typeOrOptions } : typeOrOptions)\n  }) as SpectatorHostFactory<C, H>;\n}\n","import { Type } from '@angular/core';\nimport {\n  createRoutingFactory as baseCreateRoutingFactory,\n  isType,\n  SpectatorRouting as BaseSpectatorRouting,\n  SpectatorRoutingOptions,\n  SpectatorRoutingOverrides,\n  Token\n} from '@ngneat/spectator';\n\nimport { mockProvider, SpyObject } from './mock';\n\n/**\n * @publicApi\n */\nexport class SpectatorRouting<C> extends BaseSpectatorRouting<C> {\n  public inject<T>(token: Token<T>, fromComponentInjector: boolean = false): SpyObject<T> {\n    return super.inject(token, fromComponentInjector) as SpyObject<T>;\n  }\n}\n\n/**\n * @publicApi\n */\nexport type SpectatorRoutingFactory<C> = (overrides?: SpectatorRoutingOverrides<C>) => SpectatorRouting<C>;\n\n/**\n * @publicApi\n */\nexport function createRoutingFactory<C>(typeOrOptions: SpectatorRoutingOptions<C> | Type<C>): SpectatorRoutingFactory<C> {\n  return baseCreateRoutingFactory({\n    mockProvider,\n    ...(isType(typeOrOptions) ? { component: typeOrOptions } : typeOrOptions)\n  }) as SpectatorRoutingFactory<C>;\n}\n","import { Type } from '@angular/core';\nimport {\n  createPipeFactory as baseCreatePipeFactory,\n  isType,\n  HostComponent,\n  SpectatorPipe as BaseSpectatorPipe,\n  SpectatorPipeOptions,\n  SpectatorPipeOverrides,\n  Token\n} from '@ngneat/spectator';\n\nimport { mockProvider, SpyObject } from './mock';\n\n/**\n * @publicApi\n */\nexport class SpectatorPipe<P, H = HostComponent> extends BaseSpectatorPipe<P, H> {\n  public inject<T>(token: Token<T>): SpyObject<T> {\n    return super.inject(token) as SpyObject<T>;\n  }\n}\n\n/**\n * @publicApi\n */\nexport type SpectatorPipeFactory<P, H> = <HP>(\n  templateOrOverrides?: string | SpectatorPipeOverrides<H, HP>,\n  overrides?: SpectatorPipeOverrides<H, HP>\n) => SpectatorPipe<P, H & (HostComponent extends H ? HP : unknown)>;\n\n/**\n * @publicApi\n */\nexport function createPipeFactory<P, H = HostComponent>(typeOrOptions: Type<P> | SpectatorPipeOptions<P, H>): SpectatorPipeFactory<P, H> {\n  return baseCreatePipeFactory({\n    mockProvider,\n    ...(isType(typeOrOptions) ? { pipe: typeOrOptions } : typeOrOptions)\n  }) as SpectatorPipeFactory<P, H>;\n}\n","import { Type } from '@angular/core';\nimport {\n  createHttpFactory as baseCreateHttpFactory,\n  isType,\n  CreateHttpOverrides,\n  HttpMethod,\n  SpectatorHttp as BaseSpectatorHttp,\n  SpectatorHttpOptions,\n  Token\n} from '@ngneat/spectator';\n\nimport { mockProvider, SpyObject } from './mock';\n\n/**\n * @publicApi\n */\nexport interface SpectatorHttp<S> extends BaseSpectatorHttp<S> {\n  inject<T>(token: Token<T>): SpyObject<T>;\n}\n\n/**\n * @publicApi\n */\nexport { HttpMethod };\n\n/**\n * @pubicApi\n */\nexport type SpectatorHttpFactory<S> = (overrides?: CreateHttpOverrides<S>) => SpectatorHttp<S>;\n\n/**\n * @publicApi\n */\nexport function createHttpFactory<S>(typeOrOptions: SpectatorHttpOptions<S> | Type<S>): SpectatorHttpFactory<S> {\n  return baseCreateHttpFactory({\n    mockProvider,\n    ...(isType(typeOrOptions) ? { service: typeOrOptions } : typeOrOptions)\n  }) as SpectatorHttpFactory<S>;\n}\n","import { Type, InjectionToken, AbstractType } from '@angular/core';\nimport {\n  createServiceFactory as baseCreateServiceFactory,\n  isType,\n  SpectatorServiceOverrides,\n  SpectatorServiceOptions,\n  SpectatorService as BaseSpectatorService,\n  Token\n} from '@ngneat/spectator';\n\nimport { mockProvider, SpyObject } from './mock';\n\n/**\n * @publicApi\n */\nexport interface SpectatorService<S> extends BaseSpectatorService<S> {\n  inject<T>(token: Type<T> | InjectionToken<T> | AbstractType<T>): SpyObject<T>;\n}\n\n/**\n * @publicApi\n */\nexport type SpectatorServiceFactory<S> = (overrides?: SpectatorServiceOverrides<S>) => SpectatorService<S>;\n\n/**\n * @publicApi\n */\nexport function createServiceFactory<S>(typeOrOptions: SpectatorServiceOptions<S> | Type<S>): SpectatorServiceFactory<S> {\n  return baseCreateServiceFactory({\n    mockProvider,\n    ...(isType(typeOrOptions) ? { service: typeOrOptions } : typeOrOptions)\n  }) as SpectatorServiceFactory<S>;\n}\n"]}