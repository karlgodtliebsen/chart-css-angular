import { Type } from '@angular/core';
import { HostComponent, SpectatorHost as BaseSpectatorHost, SpectatorHostOptions, SpectatorHostOverrides, Token } from '@ngneat/spectator';
import { SpyObject } from './mock';
/**
 * @publicApi
 */
export declare class SpectatorHost<C, H = HostComponent> extends BaseSpectatorHost<C, H> {
    inject<T>(token: Token<T>, fromComponentInjector?: boolean): SpyObject<T>;
}
/**
 * @publicApi
 */
export declare type SpectatorHostFactory<C, H> = <HP>(template: string, overrides?: SpectatorHostOverrides<C, H, HP>) => SpectatorHost<C, H & HostComponent extends H ? HP : unknown>;
/**
 * @publicApi
 */
export declare type PresetSpectatorHostFactory<C, H> = <HP>(template?: string, overrides?: SpectatorHostOverrides<C, H, HP>) => SpectatorHost<C, H & (HostComponent extends H ? HP : unknown)>;
/**
 * @publicApi
 */
export declare function createHostFactory<C, H = HostComponent>(options: SpectatorHostOptions<C, H> & {
    template: string;
}): PresetSpectatorHostFactory<C, H>;
/**
 * @publicApi
 */
export declare function createHostFactory<C, H = HostComponent>(typeOrOptions: Type<C> | SpectatorHostOptions<C, H>): SpectatorHostFactory<C, H>;
