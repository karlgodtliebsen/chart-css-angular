import { TestBed, waitForAsync } from '@angular/core/testing';
import { By } from '@angular/platform-browser';
import { BrowserDynamicTestingModule } from '@angular/platform-browser-dynamic/testing';
import { setProps } from '../internals/query';
import * as customMatchers from '../matchers';
import { overrideComponentIfProviderOverridesSpecified, overrideModules } from '../spectator/create-factory';
import { addMatchers } from '../core';
import { isType } from '../types';
import { nodeByDirective } from '../internals/node-by-directive';
import { initialSpectatorWithHostModule } from './initial-module';
import { getSpectatorHostDefaultOptions } from './options';
import { SpectatorHost } from './spectator-host';
export function createHostFactory(typeOrOptions) {
    const options = isType(typeOrOptions)
        ? getSpectatorHostDefaultOptions({ component: typeOrOptions })
        : getSpectatorHostDefaultOptions(typeOrOptions);
    const moduleMetadata = initialSpectatorWithHostModule(options);
    beforeEach(waitForAsync(() => {
        addMatchers(customMatchers);
        TestBed.configureTestingModule(moduleMetadata);
        overrideModules(options);
        overrideComponentIfProviderOverridesSpecified(options);
    }));
    return (template, overrides) => {
        const defaults = { props: {}, hostProps: {}, detectChanges: true, providers: [] };
        const { detectChanges, props, hostProps, providers } = Object.assign(Object.assign({}, defaults), overrides);
        if (providers && providers.length) {
            providers.forEach((provider) => {
                TestBed.overrideProvider(provider.provide, provider);
            });
        }
        TestBed.overrideModule(BrowserDynamicTestingModule, {
            set: {
                entryComponents: moduleMetadata.entryComponents
            }
        }).overrideComponent(options.host, {
            set: { template: template || options.template }
        });
        const spectator = createSpectatorHost(options, props, hostProps);
        if (options.detectChanges && detectChanges) {
            spectator.detectChanges();
        }
        return spectator;
    };
}
function createSpectatorHost(options, props, hostProps) {
    const hostFixture = TestBed.createComponent(options.host);
    const debugElement = hostFixture.debugElement.query(By.directive(options.component)) || hostFixture.debugElement;
    const debugNode = hostFixture.debugElement.queryAllNodes(nodeByDirective(options.component))[0];
    if (!debugNode) {
        throw new Error(`Cannot find component/directive ${options.component} in host template ðŸ˜”`);
    }
    const hostComponent = setProps(hostFixture.componentInstance, hostProps);
    const component = setProps(debugNode.injector.get(options.component), props);
    return new SpectatorHost(hostComponent, hostFixture.debugElement, hostFixture.nativeElement, hostFixture, debugElement, component, debugElement.nativeElement);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcGVjdGF0b3Ivc3JjL2xpYi9zcGVjdGF0b3ItaG9zdC9jcmVhdGUtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUV4RixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDOUMsT0FBTyxLQUFLLGNBQWMsTUFBTSxhQUFhLENBQUM7QUFDOUMsT0FBTyxFQUFFLDZDQUE2QyxFQUFFLGVBQWUsRUFBc0IsTUFBTSw2QkFBNkIsQ0FBQztBQUNqSSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBR2pFLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSw4QkFBOEIsRUFBd0IsTUFBTSxXQUFXLENBQUM7QUFDakYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBbUNqRCxNQUFNLFVBQVUsaUJBQWlCLENBQXVCLGFBQW1EO0lBQ3pHLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDbkMsQ0FBQyxDQUFDLDhCQUE4QixDQUFPLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxDQUFDO1FBQ3BFLENBQUMsQ0FBQyw4QkFBOEIsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUVsRCxNQUFNLGNBQWMsR0FBRyw4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QUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdmlkZXIsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRlc3RCZWQsIHdhaXRGb3JBc3luYyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBCeSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgQnJvd3NlckR5bmFtaWNUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljL3Rlc3RpbmcnO1xuXG5pbXBvcnQgeyBzZXRQcm9wcyB9IGZyb20gJy4uL2ludGVybmFscy9xdWVyeSc7XG5pbXBvcnQgKiBhcyBjdXN0b21NYXRjaGVycyBmcm9tICcuLi9tYXRjaGVycyc7XG5pbXBvcnQgeyBvdmVycmlkZUNvbXBvbmVudElmUHJvdmlkZXJPdmVycmlkZXNTcGVjaWZpZWQsIG92ZXJyaWRlTW9kdWxlcywgU3BlY3RhdG9yT3ZlcnJpZGVzIH0gZnJvbSAnLi4vc3BlY3RhdG9yL2NyZWF0ZS1mYWN0b3J5JztcbmltcG9ydCB7IGFkZE1hdGNoZXJzIH0gZnJvbSAnLi4vY29yZSc7XG5pbXBvcnQgeyBpc1R5cGUgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBub2RlQnlEaXJlY3RpdmUgfSBmcm9tICcuLi9pbnRlcm5hbHMvbm9kZS1ieS1kaXJlY3RpdmUnO1xuXG5pbXBvcnQgeyBIb3N0Q29tcG9uZW50IH0gZnJvbSAnLi9ob3N0LWNvbXBvbmVudCc7XG5pbXBvcnQgeyBpbml0aWFsU3BlY3RhdG9yV2l0aEhvc3RNb2R1bGUgfSBmcm9tICcuL2luaXRpYWwtbW9kdWxlJztcbmltcG9ydCB7IGdldFNwZWN0YXRvckhvc3REZWZhdWx0T3B0aW9ucywgU3BlY3RhdG9ySG9zdE9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMnO1xuaW1wb3J0IHsgU3BlY3RhdG9ySG9zdCB9IGZyb20gJy4vc3BlY3RhdG9yLWhvc3QnO1xuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IHR5cGUgU3BlY3RhdG9ySG9zdEZhY3Rvcnk8QywgSD4gPSA8SFA+KFxuICB0ZW1wbGF0ZTogc3RyaW5nLFxuICBvdmVycmlkZXM/OiBTcGVjdGF0b3JIb3N0T3ZlcnJpZGVzPEMsIEgsIEhQPlxuKSA9PiBTcGVjdGF0b3JIb3N0PEMsIEggJiAoSG9zdENvbXBvbmVudCBleHRlbmRzIEggPyBIUCA6IHVua25vd24pPjtcblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCB0eXBlIFByZXNldFNwZWN0YXRvckhvc3RGYWN0b3J5PEMsIEg+ID0gPEhQPihcbiAgdGVtcGxhdGU/OiBzdHJpbmcsXG4gIG92ZXJyaWRlcz86IFNwZWN0YXRvckhvc3RPdmVycmlkZXM8QywgSCwgSFA+XG4pID0+IFNwZWN0YXRvckhvc3Q8QywgSCAmIChIb3N0Q29tcG9uZW50IGV4dGVuZHMgSCA/IEhQIDogdW5rbm93bik+O1xuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTcGVjdGF0b3JIb3N0T3ZlcnJpZGVzPEMsIEgsIEhQPiBleHRlbmRzIFNwZWN0YXRvck92ZXJyaWRlczxDPiB7XG4gIGhvc3RQcm9wcz86IEhvc3RDb21wb25lbnQgZXh0ZW5kcyBIID8gSFAgOiBQYXJ0aWFsPEg+O1xufVxuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUhvc3RGYWN0b3J5PEMsIEggPSBIb3N0Q29tcG9uZW50PihcbiAgb3B0aW9uczogU3BlY3RhdG9ySG9zdE9wdGlvbnM8QywgSD4gJiB7IHRlbXBsYXRlOiBzdHJpbmcgfVxuKTogUHJlc2V0U3BlY3RhdG9ySG9zdEZhY3Rvcnk8QywgSD47XG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUhvc3RGYWN0b3J5PEMsIEggPSBIb3N0Q29tcG9uZW50Pih0eXBlT3JPcHRpb25zOiBUeXBlPEM+IHwgU3BlY3RhdG9ySG9zdE9wdGlvbnM8QywgSD4pOiBTcGVjdGF0b3JIb3N0RmFjdG9yeTxDLCBIPjtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIb3N0RmFjdG9yeTxDLCBIID0gSG9zdENvbXBvbmVudD4odHlwZU9yT3B0aW9uczogVHlwZTxDPiB8IFNwZWN0YXRvckhvc3RPcHRpb25zPEMsIEg+KTogU3BlY3RhdG9ySG9zdEZhY3Rvcnk8QywgSD4ge1xuICBjb25zdCBvcHRpb25zID0gaXNUeXBlKHR5cGVPck9wdGlvbnMpXG4gICAgPyBnZXRTcGVjdGF0b3JIb3N0RGVmYXVsdE9wdGlvbnM8QywgSD4oeyBjb21wb25lbnQ6IHR5cGVPck9wdGlvbnMgfSlcbiAgICA6IGdldFNwZWN0YXRvckhvc3REZWZhdWx0T3B0aW9ucyh0eXBlT3JPcHRpb25zKTtcblxuICBjb25zdCBtb2R1bGVNZXRhZGF0YSA9IGluaXRpYWxTcGVjdGF0b3JXaXRoSG9zdE1vZHVsZTxDLCBIPihvcHRpb25zKTtcblxuICBiZWZvcmVFYWNoKFxuICAgIHdhaXRGb3JBc3luYygoKSA9PiB7XG4gICAgICBhZGRNYXRjaGVycyhjdXN0b21NYXRjaGVycyk7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUobW9kdWxlTWV0YWRhdGEpO1xuXG4gICAgICBvdmVycmlkZU1vZHVsZXMob3B0aW9ucyk7XG5cbiAgICAgIG92ZXJyaWRlQ29tcG9uZW50SWZQcm92aWRlck92ZXJyaWRlc1NwZWNpZmllZChvcHRpb25zKTtcbiAgICB9KVxuICApO1xuXG4gIHJldHVybiA8SFA+KHRlbXBsYXRlPzogc3RyaW5nLCBvdmVycmlkZXM/OiBTcGVjdGF0b3JIb3N0T3ZlcnJpZGVzPEMsIEgsIEhQPikgPT4ge1xuICAgIGNvbnN0IGRlZmF1bHRzOiBTcGVjdGF0b3JIb3N0T3ZlcnJpZGVzPEMsIEgsIEhQPiA9IHsgcHJvcHM6IHt9LCBob3N0UHJvcHM6IHt9IGFzIGFueSwgZGV0ZWN0Q2hhbmdlczogdHJ1ZSwgcHJvdmlkZXJzOiBbXSB9O1xuICAgIGNvbnN0IHsgZGV0ZWN0Q2hhbmdlcywgcHJvcHMsIGhvc3RQcm9wcywgcHJvdmlkZXJzIH0gPSB7IC4uLmRlZmF1bHRzLCAuLi5vdmVycmlkZXMgfTtcblxuICAgIGlmIChwcm92aWRlcnMgJiYgcHJvdmlkZXJzLmxlbmd0aCkge1xuICAgICAgcHJvdmlkZXJzLmZvckVhY2goKHByb3ZpZGVyOiBQcm92aWRlcikgPT4ge1xuICAgICAgICBUZXN0QmVkLm92ZXJyaWRlUHJvdmlkZXIoKHByb3ZpZGVyIGFzIGFueSkucHJvdmlkZSwgcHJvdmlkZXIgYXMgYW55KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIFRlc3RCZWQub3ZlcnJpZGVNb2R1bGUoQnJvd3NlckR5bmFtaWNUZXN0aW5nTW9kdWxlLCB7XG4gICAgICBzZXQ6IHtcbiAgICAgICAgZW50cnlDb21wb25lbnRzOiBtb2R1bGVNZXRhZGF0YS5lbnRyeUNvbXBvbmVudHNcbiAgICAgIH1cbiAgICB9KS5vdmVycmlkZUNvbXBvbmVudChvcHRpb25zLmhvc3QsIHtcbiAgICAgIHNldDogeyB0ZW1wbGF0ZTogdGVtcGxhdGUgfHwgb3B0aW9ucy50ZW1wbGF0ZSB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBzcGVjdGF0b3IgPSBjcmVhdGVTcGVjdGF0b3JIb3N0KG9wdGlvbnMsIHByb3BzLCBob3N0UHJvcHMpO1xuXG4gICAgaWYgKG9wdGlvbnMuZGV0ZWN0Q2hhbmdlcyAmJiBkZXRlY3RDaGFuZ2VzKSB7XG4gICAgICBzcGVjdGF0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cblxuICAgIHJldHVybiBzcGVjdGF0b3I7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNwZWN0YXRvckhvc3Q8QywgSCwgSFA+KFxuICBvcHRpb25zOiBSZXF1aXJlZDxTcGVjdGF0b3JIb3N0T3B0aW9uczxDLCBIPj4sXG4gIHByb3BzPzogUGFydGlhbDxDPixcbiAgaG9zdFByb3BzPzogSFBcbik6IFNwZWN0YXRvckhvc3Q8QywgSCAmIEhQPiB7XG4gIGNvbnN0IGhvc3RGaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQob3B0aW9ucy5ob3N0KTtcbiAgY29uc3QgZGVidWdFbGVtZW50ID0gaG9zdEZpeHR1cmUuZGVidWdFbGVtZW50LnF1ZXJ5KEJ5LmRpcmVjdGl2ZShvcHRpb25zLmNvbXBvbmVudCkpIHx8IGhvc3RGaXh0dXJlLmRlYnVnRWxlbWVudDtcbiAgY29uc3QgZGVidWdOb2RlID0gaG9zdEZpeHR1cmUuZGVidWdFbGVtZW50LnF1ZXJ5QWxsTm9kZXMobm9kZUJ5RGlyZWN0aXZlKG9wdGlvbnMuY29tcG9uZW50KSlbMF07XG5cbiAgaWYgKCFkZWJ1Z05vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBmaW5kIGNvbXBvbmVudC9kaXJlY3RpdmUgJHtvcHRpb25zLmNvbXBvbmVudH0gaW4gaG9zdCB0ZW1wbGF0ZSDwn5iUYCk7XG4gIH1cblxuICBjb25zdCBob3N0Q29tcG9uZW50ID0gc2V0UHJvcHMoaG9zdEZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2UsIGhvc3RQcm9wcyk7XG4gIGNvbnN0IGNvbXBvbmVudCA9IHNldFByb3BzKGRlYnVnTm9kZS5pbmplY3Rvci5nZXQob3B0aW9ucy5jb21wb25lbnQpLCBwcm9wcyk7XG5cbiAgcmV0dXJuIG5ldyBTcGVjdGF0b3JIb3N0KFxuICAgIGhvc3RDb21wb25lbnQsXG4gICAgaG9zdEZpeHR1cmUuZGVidWdFbGVtZW50LFxuICAgIGhvc3RGaXh0dXJlLm5hdGl2ZUVsZW1lbnQsXG4gICAgaG9zdEZpeHR1cmUsXG4gICAgZGVidWdFbGVtZW50LFxuICAgIGNvbXBvbmVudCxcbiAgICBkZWJ1Z0VsZW1lbnQubmF0aXZlRWxlbWVudFxuICApO1xufVxuIl19