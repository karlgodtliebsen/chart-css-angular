import { TestBed, waitForAsync } from '@angular/core/testing';
import { BrowserDynamicTestingModule } from '@angular/platform-browser-dynamic/testing';
import { setProps } from '../internals/query';
import * as customMatchers from '../matchers';
import { addMatchers } from '../core';
import { isType } from '../types';
import { initialSpectatorModule } from './initial-module';
import { getSpectatorDefaultOptions } from './options';
import { Spectator } from './spectator';
/**
 * @internal
 */
export function overrideComponentIfProviderOverridesSpecified(options) {
    const hasProviderOverrides = options.componentProviders.length || options.componentMocks.length;
    const hasViewProviders = options.componentViewProviders.length || options.componentViewProvidersMocks.length;
    if (hasProviderOverrides || hasViewProviders) {
        let providerConfiguration = {};
        if (hasProviderOverrides) {
            providerConfiguration = {
                providers: [...options.componentProviders, ...options.componentMocks.map(p => options.mockProvider(p))]
            };
        }
        if (hasViewProviders) {
            providerConfiguration = Object.assign(Object.assign({}, providerConfiguration), { viewProviders: [...options.componentViewProviders, ...options.componentViewProvidersMocks.map(p => options.mockProvider(p))] });
        }
        TestBed.overrideComponent(options.component, {
            set: providerConfiguration
        });
    }
}
/**
 * @internal
 */
export function overrideModules(options) {
    if (options.overrideModules.length) {
        options.overrideModules.forEach(overrideModule => {
            const [ngModule, override] = overrideModule;
            TestBed.overrideModule(ngModule, override);
        });
    }
}
/**
 * @publicApi
 */
export function createComponentFactory(typeOrOptions) {
    const options = isType(typeOrOptions)
        ? getSpectatorDefaultOptions({ component: typeOrOptions })
        : getSpectatorDefaultOptions(typeOrOptions);
    const moduleMetadata = initialSpectatorModule(options);
    beforeEach(waitForAsync(() => {
        addMatchers(customMatchers);
        TestBed.configureTestingModule(moduleMetadata).overrideModule(BrowserDynamicTestingModule, {
            set: {
                entryComponents: moduleMetadata.entryComponents
            }
        });
        overrideModules(options);
        overrideComponentIfProviderOverridesSpecified(options);
        TestBed.compileComponents();
    }));
    return (overrides) => {
        const defaults = { props: {}, detectChanges: true, providers: [] };
        const { detectChanges, props, providers } = Object.assign(Object.assign({}, defaults), overrides);
        if (providers && providers.length) {
            providers.forEach((provider) => {
                TestBed.overrideProvider(provider.provide, provider);
            });
        }
        const spectator = createSpectator(options, props);
        if (options.detectChanges && detectChanges) {
            spectator.detectChanges();
        }
        return spectator;
    };
}
function createSpectator(options, props) {
    const fixture = TestBed.createComponent(options.component);
    const debugElement = fixture.debugElement;
    const component = setProps(fixture.componentInstance, props);
    return new Spectator(fixture, debugElement, component, debugElement.nativeElement);
}
//# sourceMappingURL=data:application/json;base64,