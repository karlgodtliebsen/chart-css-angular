import { queries as DOMQueries, getDefaultNormalizer } from '@testing-library/dom';
export class DOMSelector {
    // Wrap selector functions in a class to make reflection easier in getChild
    constructor(execute) {
        this.execute = execute;
    }
}
export const byLabel = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByLabelText(el, matcher, options));
export const byPlaceholder = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByPlaceholderText(el, matcher, options));
export const byText = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByText(el, matcher, options));
export const byTextContent = (matcher, options) => {
    let textContentMatcher;
    const normalizer = (options === null || options === void 0 ? void 0 : options.normalizer) || getDefaultNormalizer(options);
    const getTextContent = (elem) => { var _a; return normalizer((_a = elem.textContent) !== null && _a !== void 0 ? _a : ''); };
    if (typeof matcher === 'string') {
        textContentMatcher = (_, elem) => {
            if ((options === null || options === void 0 ? void 0 : options.exact) === false) {
                return (getTextContent(elem)
                    .toLowerCase()
                    .indexOf(matcher.toLowerCase()) >= 0);
            }
            return getTextContent(elem) === matcher;
        };
    }
    else if (matcher instanceof RegExp) {
        textContentMatcher = (_, elem) => matcher.test(getTextContent(elem));
    }
    else {
        textContentMatcher = (_, elem) => matcher(getTextContent(elem), elem);
    }
    return new DOMSelector(el => DOMQueries.queryAllByText(el, textContentMatcher, options));
};
export const byAltText = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByAltText(el, matcher, options));
export const byTitle = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByTitle(el, matcher, options));
export const byTestId = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByTestId(el, matcher, options));
export const byValue = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByDisplayValue(el, matcher, options));
export const byRole = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByRole(el, matcher, options));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLXNlbGVjdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3NwZWN0YXRvci9zcmMvbGliL2RvbS1zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUtMLE9BQU8sSUFBSSxVQUFVLEVBQ3JCLG9CQUFvQixFQUVyQixNQUFNLHNCQUFzQixDQUFDO0FBTTlCLE1BQU0sT0FBTyxXQUFXO0lBQ3RCLDJFQUEyRTtJQUMzRSxZQUE0QixPQUEyQztRQUEzQyxZQUFPLEdBQVAsT0FBTyxDQUFvQztJQUFHLENBQUM7Q0FDNUU7QUFJRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQXVCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQzlELElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUU5RSxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQXVCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQ3BFLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUVwRixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQStDLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQ3JGLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFFekUsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsT0FBZ0IsRUFBRSxPQUF5QyxFQUFlLEVBQUU7SUFDeEcsSUFBSSxrQkFBMkIsQ0FBQztJQUNoQyxNQUFNLFVBQVUsR0FBaUIsQ0FBQSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsVUFBVSxLQUFJLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RGLE1BQU0sY0FBYyxHQUFHLENBQUMsSUFBaUIsRUFBVSxFQUFFLFdBQUMsT0FBQSxVQUFVLE9BQUMsSUFBSSxDQUFDLFdBQVcsbUNBQUksRUFBRSxDQUFDLENBQUEsRUFBQSxDQUFDO0lBRXpGLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO1FBQy9CLGtCQUFrQixHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQy9CLElBQUksQ0FBQSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsS0FBSyxNQUFLLEtBQUssRUFBRTtnQkFDNUIsT0FBTyxDQUNMLGNBQWMsQ0FBQyxJQUFJLENBQUM7cUJBQ2pCLFdBQVcsRUFBRTtxQkFDYixPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUN2QyxDQUFDO2FBQ0g7WUFFRCxPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxPQUFPLENBQUM7UUFDMUMsQ0FBQyxDQUFDO0tBQ0g7U0FBTSxJQUFJLE9BQU8sWUFBWSxNQUFNLEVBQUU7UUFDcEMsa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQ3RFO1NBQU07UUFDTCxrQkFBa0IsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDdkU7SUFFRCxPQUFPLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUMzRixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQXVCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQ2hFLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUU1RSxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQXVCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUV6SSxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQXVCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBRTNJLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBdUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FDOUQsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBRWpGLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBc0MsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FDNUUsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIE1hdGNoZXIsXG4gIE1hdGNoZXJPcHRpb25zLFxuICBOb3JtYWxpemVyRm4sXG4gIFNlbGVjdG9yTWF0Y2hlck9wdGlvbnMsXG4gIHF1ZXJpZXMgYXMgRE9NUXVlcmllcyxcbiAgZ2V0RGVmYXVsdE5vcm1hbGl6ZXIsXG4gIEJ5Um9sZU9wdGlvbnNcbn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9kb20nO1xuXG5pbnRlcmZhY2UgTWFuZGF0b3J5U2VsZWN0b3JNYXRjaGluZ09wdGlvbnMgZXh0ZW5kcyBNYXRjaGVyT3B0aW9ucyB7XG4gIHNlbGVjdG9yOiBTZWxlY3Rvck1hdGNoZXJPcHRpb25zWydzZWxlY3RvciddO1xufVxuXG5leHBvcnQgY2xhc3MgRE9NU2VsZWN0b3Ige1xuICAvLyBXcmFwIHNlbGVjdG9yIGZ1bmN0aW9ucyBpbiBhIGNsYXNzIHRvIG1ha2UgcmVmbGVjdGlvbiBlYXNpZXIgaW4gZ2V0Q2hpbGRcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGV4ZWN1dGU6IChlbDogSFRNTEVsZW1lbnQpID0+IEhUTUxFbGVtZW50W10pIHt9XG59XG5cbmV4cG9ydCB0eXBlIERPTVNlbGVjdG9yRmFjdG9yeTxUT3B0aW9ucyBleHRlbmRzIE1hdGNoZXJPcHRpb25zID0gTWF0Y2hlck9wdGlvbnM+ID0gKG1hdGNoZXI6IE1hdGNoZXIsIG9wdGlvbnM/OiBUT3B0aW9ucykgPT4gRE9NU2VsZWN0b3I7XG5cbmV4cG9ydCBjb25zdCBieUxhYmVsOiBET01TZWxlY3RvckZhY3RvcnkgPSAobWF0Y2hlciwgb3B0aW9ucykgPT5cbiAgbmV3IERPTVNlbGVjdG9yKGVsID0+IERPTVF1ZXJpZXMucXVlcnlBbGxCeUxhYmVsVGV4dChlbCwgbWF0Y2hlciwgb3B0aW9ucykpO1xuXG5leHBvcnQgY29uc3QgYnlQbGFjZWhvbGRlcjogRE9NU2VsZWN0b3JGYWN0b3J5ID0gKG1hdGNoZXIsIG9wdGlvbnMpID0+XG4gIG5ldyBET01TZWxlY3RvcihlbCA9PiBET01RdWVyaWVzLnF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQoZWwsIG1hdGNoZXIsIG9wdGlvbnMpKTtcblxuZXhwb3J0IGNvbnN0IGJ5VGV4dDogRE9NU2VsZWN0b3JGYWN0b3J5PFNlbGVjdG9yTWF0Y2hlck9wdGlvbnM+ID0gKG1hdGNoZXIsIG9wdGlvbnMpID0+XG4gIG5ldyBET01TZWxlY3RvcihlbCA9PiBET01RdWVyaWVzLnF1ZXJ5QWxsQnlUZXh0KGVsLCBtYXRjaGVyLCBvcHRpb25zKSk7XG5cbmV4cG9ydCBjb25zdCBieVRleHRDb250ZW50ID0gKG1hdGNoZXI6IE1hdGNoZXIsIG9wdGlvbnM6IE1hbmRhdG9yeVNlbGVjdG9yTWF0Y2hpbmdPcHRpb25zKTogRE9NU2VsZWN0b3IgPT4ge1xuICBsZXQgdGV4dENvbnRlbnRNYXRjaGVyOiBNYXRjaGVyO1xuICBjb25zdCBub3JtYWxpemVyOiBOb3JtYWxpemVyRm4gPSBvcHRpb25zPy5ub3JtYWxpemVyIHx8IGdldERlZmF1bHROb3JtYWxpemVyKG9wdGlvbnMpO1xuICBjb25zdCBnZXRUZXh0Q29udGVudCA9IChlbGVtOiBIVE1MRWxlbWVudCk6IHN0cmluZyA9PiBub3JtYWxpemVyKGVsZW0udGV4dENvbnRlbnQgPz8gJycpO1xuXG4gIGlmICh0eXBlb2YgbWF0Y2hlciA9PT0gJ3N0cmluZycpIHtcbiAgICB0ZXh0Q29udGVudE1hdGNoZXIgPSAoXywgZWxlbSkgPT4ge1xuICAgICAgaWYgKG9wdGlvbnM/LmV4YWN0ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGdldFRleHRDb250ZW50KGVsZW0pXG4gICAgICAgICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgLmluZGV4T2YobWF0Y2hlci50b0xvd2VyQ2FzZSgpKSA+PSAwXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRUZXh0Q29udGVudChlbGVtKSA9PT0gbWF0Y2hlcjtcbiAgICB9O1xuICB9IGVsc2UgaWYgKG1hdGNoZXIgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICB0ZXh0Q29udGVudE1hdGNoZXIgPSAoXywgZWxlbSkgPT4gbWF0Y2hlci50ZXN0KGdldFRleHRDb250ZW50KGVsZW0pKTtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0Q29udGVudE1hdGNoZXIgPSAoXywgZWxlbSkgPT4gbWF0Y2hlcihnZXRUZXh0Q29udGVudChlbGVtKSwgZWxlbSk7XG4gIH1cblxuICByZXR1cm4gbmV3IERPTVNlbGVjdG9yKGVsID0+IERPTVF1ZXJpZXMucXVlcnlBbGxCeVRleHQoZWwsIHRleHRDb250ZW50TWF0Y2hlciwgb3B0aW9ucykpO1xufTtcblxuZXhwb3J0IGNvbnN0IGJ5QWx0VGV4dDogRE9NU2VsZWN0b3JGYWN0b3J5ID0gKG1hdGNoZXIsIG9wdGlvbnMpID0+XG4gIG5ldyBET01TZWxlY3RvcihlbCA9PiBET01RdWVyaWVzLnF1ZXJ5QWxsQnlBbHRUZXh0KGVsLCBtYXRjaGVyLCBvcHRpb25zKSk7XG5cbmV4cG9ydCBjb25zdCBieVRpdGxlOiBET01TZWxlY3RvckZhY3RvcnkgPSAobWF0Y2hlciwgb3B0aW9ucykgPT4gbmV3IERPTVNlbGVjdG9yKGVsID0+IERPTVF1ZXJpZXMucXVlcnlBbGxCeVRpdGxlKGVsLCBtYXRjaGVyLCBvcHRpb25zKSk7XG5cbmV4cG9ydCBjb25zdCBieVRlc3RJZDogRE9NU2VsZWN0b3JGYWN0b3J5ID0gKG1hdGNoZXIsIG9wdGlvbnMpID0+IG5ldyBET01TZWxlY3RvcihlbCA9PiBET01RdWVyaWVzLnF1ZXJ5QWxsQnlUZXN0SWQoZWwsIG1hdGNoZXIsIG9wdGlvbnMpKTtcblxuZXhwb3J0IGNvbnN0IGJ5VmFsdWU6IERPTVNlbGVjdG9yRmFjdG9yeSA9IChtYXRjaGVyLCBvcHRpb25zKSA9PlxuICBuZXcgRE9NU2VsZWN0b3IoZWwgPT4gRE9NUXVlcmllcy5xdWVyeUFsbEJ5RGlzcGxheVZhbHVlKGVsLCBtYXRjaGVyLCBvcHRpb25zKSk7XG5cbmV4cG9ydCBjb25zdCBieVJvbGU6IERPTVNlbGVjdG9yRmFjdG9yeTxCeVJvbGVPcHRpb25zPiA9IChtYXRjaGVyLCBvcHRpb25zKSA9PlxuICBuZXcgRE9NU2VsZWN0b3IoZWwgPT4gRE9NUXVlcmllcy5xdWVyeUFsbEJ5Um9sZShlbCwgbWF0Y2hlciwgb3B0aW9ucykpO1xuIl19