import { TestBed, waitForAsync } from '@angular/core/testing';
import { BrowserDynamicTestingModule } from '@angular/platform-browser-dynamic/testing';
import { setProps } from '../internals/query';
import * as customMatchers from '../matchers';
import { addMatchers } from '../core';
import { isType } from '../types';
import { initialSpectatorPipeModule } from './initial-module';
import { getSpectatorPipeDefaultOptions } from './options';
import { SpectatorPipe } from './spectator-pipe';
import { overrideModules } from '../spectator/create-factory';
/**
 * @publicApi
 */
export function createPipeFactory(typeOrOptions) {
    const options = isType(typeOrOptions)
        ? getSpectatorPipeDefaultOptions({ pipe: typeOrOptions })
        : getSpectatorPipeDefaultOptions(typeOrOptions);
    const moduleMetadata = initialSpectatorPipeModule(options);
    beforeEach(waitForAsync(() => {
        addMatchers(customMatchers);
        TestBed.configureTestingModule(moduleMetadata);
        overrideModules(options);
    }));
    return (templateOrOverrides, overrides) => {
        const defaults = {
            hostProps: {},
            detectChanges: true,
            providers: []
        };
        const resolvedOverrides = typeof templateOrOverrides === 'object' ? templateOrOverrides : overrides;
        const { detectChanges, hostProps, providers } = Object.assign(Object.assign({}, defaults), resolvedOverrides);
        const template = typeof templateOrOverrides === 'string' ? templateOrOverrides : options.template;
        if (providers && providers.length) {
            providers.forEach((provider) => {
                TestBed.overrideProvider(provider.provide, provider);
            });
        }
        if (template) {
            TestBed.overrideModule(BrowserDynamicTestingModule, {
                set: {
                    entryComponents: moduleMetadata.entryComponents
                }
            }).overrideComponent(options.host, {
                set: { template }
            });
        }
        const spectator = createSpectatorPipe(options, hostProps);
        if (options.detectChanges && detectChanges) {
            spectator.detectChanges();
        }
        return spectator;
    };
}
function createSpectatorPipe(options, hostProps) {
    const hostFixture = TestBed.createComponent(options.host);
    const debugElement = hostFixture.debugElement;
    const hostComponent = setProps(hostFixture.componentInstance, hostProps);
    return new SpectatorPipe(hostComponent, hostFixture, hostFixture.debugElement, debugElement.nativeElement);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcGVjdGF0b3Ivc3JjL2xpYi9zcGVjdGF0b3ItcGlwZS9jcmVhdGUtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBRXhGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM5QyxPQUFPLEtBQUssY0FBYyxNQUFNLGFBQWEsQ0FBQztBQUU5QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFHbEMsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDOUQsT0FBTyxFQUFFLDhCQUE4QixFQUF3QixNQUFNLFdBQVcsQ0FBQztBQUNqRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBa0I5RDs7R0FFRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBdUIsYUFBbUQ7SUFDekcsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQUNuQyxDQUFDLENBQUMsOEJBQThCLENBQU8sRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLENBQUM7UUFDL0QsQ0FBQyxDQUFDLDhCQUE4QixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRWxELE1BQU0sY0FBYyxHQUFHLDBCQUEwQixDQUFPLE9BQU8sQ0FBQyxDQUFDO0lBRWpFLFVBQVUsQ0FDUixZQUFZLENBQUMsR0FBRyxFQUFFO1FBQ2hCLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM1QixPQUFPLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDL0MsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFFRixPQUFPLENBQUssbUJBQTRELEVBQUUsU0FBeUMsRUFBRSxFQUFFO1FBQ3JILE1BQU0sUUFBUSxHQUFrQztZQUM5QyxTQUFTLEVBQUUsRUFBUztZQUNwQixhQUFhLEVBQUUsSUFBSTtZQUNuQixTQUFTLEVBQUUsRUFBRTtTQUNkLENBQUM7UUFDRixNQUFNLGlCQUFpQixHQUFHLE9BQU8sbUJBQW1CLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3BHLE1BQU0sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxtQ0FBUSxRQUFRLEdBQUssaUJBQWlCLENBQUUsQ0FBQztRQUN0RixNQUFNLFFBQVEsR0FBRyxPQUFPLG1CQUFtQixLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFFbEcsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRTtZQUNqQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBa0IsRUFBRSxFQUFFO2dCQUN2QyxPQUFPLENBQUMsZ0JBQWdCLENBQUUsUUFBZ0IsQ0FBQyxPQUFPLEVBQUUsUUFBZSxDQUFDLENBQUM7WUFDdkUsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksUUFBUSxFQUFFO1lBQ1osT0FBTyxDQUFDLGNBQWMsQ0FBQywyQkFBMkIsRUFBRTtnQkFDbEQsR0FBRyxFQUFFO29CQUNILGVBQWUsRUFBRSxjQUFjLENBQUMsZUFBZTtpQkFDaEQ7YUFDRixDQUFDLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtnQkFDakMsR0FBRyxFQUFFLEVBQUUsUUFBUSxFQUFFO2FBQ2xCLENBQUMsQ0FBQztTQUNKO1FBRUQsTUFBTSxTQUFTLEdBQUcsbUJBQW1CLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRTFELElBQUksT0FBTyxDQUFDLGFBQWEsSUFBSSxhQUFhLEVBQUU7WUFDMUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQzNCO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQVcsT0FBNkMsRUFBRSxTQUFjO0lBQ2xHLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFELE1BQU0sWUFBWSxHQUFHLFdBQVcsQ0FBQyxZQUFZLENBQUM7SUFFOUMsTUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUV6RSxPQUFPLElBQUksYUFBYSxDQUFDLGFBQWEsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDN0csQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3ZpZGVyLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUZXN0QmVkLCB3YWl0Rm9yQXN5bmMgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgQnJvd3NlckR5bmFtaWNUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljL3Rlc3RpbmcnO1xuXG5pbXBvcnQgeyBzZXRQcm9wcyB9IGZyb20gJy4uL2ludGVybmFscy9xdWVyeSc7XG5pbXBvcnQgKiBhcyBjdXN0b21NYXRjaGVycyBmcm9tICcuLi9tYXRjaGVycyc7XG5pbXBvcnQgeyBCYXNlU3BlY3RhdG9yT3ZlcnJpZGVzIH0gZnJvbSAnLi4vYmFzZS9vcHRpb25zJztcbmltcG9ydCB7IGFkZE1hdGNoZXJzIH0gZnJvbSAnLi4vY29yZSc7XG5pbXBvcnQgeyBpc1R5cGUgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBIb3N0Q29tcG9uZW50IH0gZnJvbSAnLi4vc3BlY3RhdG9yLWhvc3QvaG9zdC1jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBpbml0aWFsU3BlY3RhdG9yUGlwZU1vZHVsZSB9IGZyb20gJy4vaW5pdGlhbC1tb2R1bGUnO1xuaW1wb3J0IHsgZ2V0U3BlY3RhdG9yUGlwZURlZmF1bHRPcHRpb25zLCBTcGVjdGF0b3JQaXBlT3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XG5pbXBvcnQgeyBTcGVjdGF0b3JQaXBlIH0gZnJvbSAnLi9zcGVjdGF0b3ItcGlwZSc7XG5pbXBvcnQgeyBvdmVycmlkZU1vZHVsZXMgfSBmcm9tICcuLi9zcGVjdGF0b3IvY3JlYXRlLWZhY3RvcnknO1xuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IHR5cGUgU3BlY3RhdG9yUGlwZUZhY3Rvcnk8UCwgSD4gPSA8SFA+KFxuICB0ZW1wbGF0ZU9yT3ZlcnJpZGVzPzogc3RyaW5nIHwgU3BlY3RhdG9yUGlwZU92ZXJyaWRlczxILCBIUD4sXG4gIG92ZXJyaWRlcz86IFNwZWN0YXRvclBpcGVPdmVycmlkZXM8SCwgSFA+XG4pID0+IFNwZWN0YXRvclBpcGU8UCwgSCAmIChIb3N0Q29tcG9uZW50IGV4dGVuZHMgSCA/IEhQIDogdW5rbm93bik+O1xuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTcGVjdGF0b3JQaXBlT3ZlcnJpZGVzPEgsIEhQPiBleHRlbmRzIEJhc2VTcGVjdGF0b3JPdmVycmlkZXMge1xuICBkZXRlY3RDaGFuZ2VzPzogYm9vbGVhbjtcbiAgaG9zdFByb3BzPzogSG9zdENvbXBvbmVudCBleHRlbmRzIEggPyBIUCA6IFBhcnRpYWw8SD47XG59XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUGlwZUZhY3Rvcnk8UCwgSCA9IEhvc3RDb21wb25lbnQ+KHR5cGVPck9wdGlvbnM6IFR5cGU8UD4gfCBTcGVjdGF0b3JQaXBlT3B0aW9uczxQLCBIPik6IFNwZWN0YXRvclBpcGVGYWN0b3J5PFAsIEg+IHtcbiAgY29uc3Qgb3B0aW9ucyA9IGlzVHlwZSh0eXBlT3JPcHRpb25zKVxuICAgID8gZ2V0U3BlY3RhdG9yUGlwZURlZmF1bHRPcHRpb25zPFAsIEg+KHsgcGlwZTogdHlwZU9yT3B0aW9ucyB9KVxuICAgIDogZ2V0U3BlY3RhdG9yUGlwZURlZmF1bHRPcHRpb25zKHR5cGVPck9wdGlvbnMpO1xuXG4gIGNvbnN0IG1vZHVsZU1ldGFkYXRhID0gaW5pdGlhbFNwZWN0YXRvclBpcGVNb2R1bGU8UCwgSD4ob3B0aW9ucyk7XG5cbiAgYmVmb3JlRWFjaChcbiAgICB3YWl0Rm9yQXN5bmMoKCkgPT4ge1xuICAgICAgYWRkTWF0Y2hlcnMoY3VzdG9tTWF0Y2hlcnMpO1xuICAgICAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKG1vZHVsZU1ldGFkYXRhKTtcbiAgICAgIG92ZXJyaWRlTW9kdWxlcyhvcHRpb25zKTtcbiAgICB9KVxuICApO1xuXG4gIHJldHVybiA8SFA+KHRlbXBsYXRlT3JPdmVycmlkZXM/OiBzdHJpbmcgfCBTcGVjdGF0b3JQaXBlT3ZlcnJpZGVzPEgsIEhQPiwgb3ZlcnJpZGVzPzogU3BlY3RhdG9yUGlwZU92ZXJyaWRlczxILCBIUD4pID0+IHtcbiAgICBjb25zdCBkZWZhdWx0czogU3BlY3RhdG9yUGlwZU92ZXJyaWRlczxILCBIUD4gPSB7XG4gICAgICBob3N0UHJvcHM6IHt9IGFzIGFueSxcbiAgICAgIGRldGVjdENoYW5nZXM6IHRydWUsXG4gICAgICBwcm92aWRlcnM6IFtdXG4gICAgfTtcbiAgICBjb25zdCByZXNvbHZlZE92ZXJyaWRlcyA9IHR5cGVvZiB0ZW1wbGF0ZU9yT3ZlcnJpZGVzID09PSAnb2JqZWN0JyA/IHRlbXBsYXRlT3JPdmVycmlkZXMgOiBvdmVycmlkZXM7XG4gICAgY29uc3QgeyBkZXRlY3RDaGFuZ2VzLCBob3N0UHJvcHMsIHByb3ZpZGVycyB9ID0geyAuLi5kZWZhdWx0cywgLi4ucmVzb2x2ZWRPdmVycmlkZXMgfTtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHR5cGVvZiB0ZW1wbGF0ZU9yT3ZlcnJpZGVzID09PSAnc3RyaW5nJyA/IHRlbXBsYXRlT3JPdmVycmlkZXMgOiBvcHRpb25zLnRlbXBsYXRlO1xuXG4gICAgaWYgKHByb3ZpZGVycyAmJiBwcm92aWRlcnMubGVuZ3RoKSB7XG4gICAgICBwcm92aWRlcnMuZm9yRWFjaCgocHJvdmlkZXI6IFByb3ZpZGVyKSA9PiB7XG4gICAgICAgIFRlc3RCZWQub3ZlcnJpZGVQcm92aWRlcigocHJvdmlkZXIgYXMgYW55KS5wcm92aWRlLCBwcm92aWRlciBhcyBhbnkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICBUZXN0QmVkLm92ZXJyaWRlTW9kdWxlKEJyb3dzZXJEeW5hbWljVGVzdGluZ01vZHVsZSwge1xuICAgICAgICBzZXQ6IHtcbiAgICAgICAgICBlbnRyeUNvbXBvbmVudHM6IG1vZHVsZU1ldGFkYXRhLmVudHJ5Q29tcG9uZW50c1xuICAgICAgICB9XG4gICAgICB9KS5vdmVycmlkZUNvbXBvbmVudChvcHRpb25zLmhvc3QsIHtcbiAgICAgICAgc2V0OiB7IHRlbXBsYXRlIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHNwZWN0YXRvciA9IGNyZWF0ZVNwZWN0YXRvclBpcGUob3B0aW9ucywgaG9zdFByb3BzKTtcblxuICAgIGlmIChvcHRpb25zLmRldGVjdENoYW5nZXMgJiYgZGV0ZWN0Q2hhbmdlcykge1xuICAgICAgc3BlY3RhdG9yLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3BlY3RhdG9yO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTcGVjdGF0b3JQaXBlPFAsIEgsIEhQPihvcHRpb25zOiBSZXF1aXJlZDxTcGVjdGF0b3JQaXBlT3B0aW9uczxQLCBIPj4sIGhvc3RQcm9wcz86IEhQKTogU3BlY3RhdG9yUGlwZTxQLCBIICYgSFA+IHtcbiAgY29uc3QgaG9zdEZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChvcHRpb25zLmhvc3QpO1xuICBjb25zdCBkZWJ1Z0VsZW1lbnQgPSBob3N0Rml4dHVyZS5kZWJ1Z0VsZW1lbnQ7XG5cbiAgY29uc3QgaG9zdENvbXBvbmVudCA9IHNldFByb3BzKGhvc3RGaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlLCBob3N0UHJvcHMpO1xuXG4gIHJldHVybiBuZXcgU3BlY3RhdG9yUGlwZShob3N0Q29tcG9uZW50LCBob3N0Rml4dHVyZSwgaG9zdEZpeHR1cmUuZGVidWdFbGVtZW50LCBkZWJ1Z0VsZW1lbnQubmF0aXZlRWxlbWVudCk7XG59XG4iXX0=