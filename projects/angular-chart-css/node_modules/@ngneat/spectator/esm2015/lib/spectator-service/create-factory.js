import { TestBed } from '@angular/core/testing';
import { isType, doesServiceImplementsOnDestroy } from '../types';
import { initialServiceModule } from './initial-module';
import { getDefaultServiceOptions } from './options';
import { SpectatorService } from './spectator-service';
import { overrideModules } from '../spectator/create-factory';
/**
 * @publicApi
 */
export function createServiceFactory(typeOrOptions) {
    const service = isType(typeOrOptions) ? typeOrOptions : typeOrOptions.service;
    const options = isType(typeOrOptions) ? getDefaultServiceOptions({ service }) : getDefaultServiceOptions(typeOrOptions);
    const moduleMetadata = initialServiceModule(options);
    beforeEach(() => {
        TestBed.configureTestingModule(moduleMetadata);
        overrideModules(options);
    });
    afterEach(() => {
        const testedService = TestBed.inject
            ? TestBed.inject(service)
            : TestBed.get(service);
        if (doesServiceImplementsOnDestroy(testedService)) {
            // tslint:disable-next-line:no-life-cycle-call
            testedService.ngOnDestroy();
        }
    });
    return (overrides) => {
        const defaults = { providers: [] };
        const { providers } = Object.assign(Object.assign({}, defaults), overrides);
        if (providers && providers.length) {
            providers.forEach((provider) => {
                TestBed.overrideProvider(provider.provide, provider);
            });
        }
        return new SpectatorService(TestBed.inject ? TestBed.inject(service) : TestBed.get(service));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcGVjdGF0b3Ivc3JjL2xpYi9zcGVjdGF0b3Itc2VydmljZS9jcmVhdGUtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsT0FBTyxFQUFpQixNQUFNLHVCQUF1QixDQUFDO0FBRy9ELE9BQU8sRUFBRSxNQUFNLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEQsT0FBTyxFQUFFLHdCQUF3QixFQUEyQixNQUFNLFdBQVcsQ0FBQztBQUM5RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFhOUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsb0JBQW9CLENBQUksYUFBbUQ7SUFDekYsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7SUFDOUUsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRTNILE1BQU0sY0FBYyxHQUFHLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXJELFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxPQUFPLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDL0MsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sYUFBYSxHQUFTLE9BQVEsQ0FBQyxNQUFNO1lBQ3pDLENBQUMsQ0FBdUUsT0FBUSxDQUFDLE1BQU0sQ0FBSSxPQUFPLENBQUM7WUFDbkcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFekIsSUFBSSw4QkFBOEIsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUNqRCw4Q0FBOEM7WUFDOUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQzdCO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsU0FBd0MsRUFBRSxFQUFFO1FBQ2xELE1BQU0sUUFBUSxHQUFpQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUNqRSxNQUFNLEVBQUUsU0FBUyxFQUFFLG1DQUFRLFFBQVEsR0FBSyxTQUFTLENBQUUsQ0FBQztRQUVwRCxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFO1lBQ2pDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFrQixFQUFFLEVBQUU7Z0JBQ3ZDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBRSxRQUFnQixDQUFDLE9BQU8sRUFBRSxRQUFlLENBQUMsQ0FBQztZQUN2RSxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxJQUFJLGdCQUFnQixDQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNsRyxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdmlkZXIsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRlc3RCZWQsIFRlc3RCZWRTdGF0aWMgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuXG5pbXBvcnQgeyBCYXNlU3BlY3RhdG9yT3ZlcnJpZGVzIH0gZnJvbSAnLi4vYmFzZS9vcHRpb25zJztcbmltcG9ydCB7IGlzVHlwZSwgZG9lc1NlcnZpY2VJbXBsZW1lbnRzT25EZXN0cm95IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbXBvcnQgeyBpbml0aWFsU2VydmljZU1vZHVsZSB9IGZyb20gJy4vaW5pdGlhbC1tb2R1bGUnO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdFNlcnZpY2VPcHRpb25zLCBTcGVjdGF0b3JTZXJ2aWNlT3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XG5pbXBvcnQgeyBTcGVjdGF0b3JTZXJ2aWNlIH0gZnJvbSAnLi9zcGVjdGF0b3Itc2VydmljZSc7XG5pbXBvcnQgeyBvdmVycmlkZU1vZHVsZXMgfSBmcm9tICcuLi9zcGVjdGF0b3IvY3JlYXRlLWZhY3RvcnknO1xuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IHR5cGUgU3BlY3RhdG9yU2VydmljZUZhY3Rvcnk8Uz4gPSAob3ZlcnJpZGVzPzogU3BlY3RhdG9yU2VydmljZU92ZXJyaWRlczxTPikgPT4gU3BlY3RhdG9yU2VydmljZTxTPjtcblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1lbXB0eS1pbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgU3BlY3RhdG9yU2VydmljZU92ZXJyaWRlczxTPiBleHRlbmRzIEJhc2VTcGVjdGF0b3JPdmVycmlkZXMge31cblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZXJ2aWNlRmFjdG9yeTxTPih0eXBlT3JPcHRpb25zOiBUeXBlPFM+IHwgU3BlY3RhdG9yU2VydmljZU9wdGlvbnM8Uz4pOiBTcGVjdGF0b3JTZXJ2aWNlRmFjdG9yeTxTPiB7XG4gIGNvbnN0IHNlcnZpY2UgPSBpc1R5cGUodHlwZU9yT3B0aW9ucykgPyB0eXBlT3JPcHRpb25zIDogdHlwZU9yT3B0aW9ucy5zZXJ2aWNlO1xuICBjb25zdCBvcHRpb25zID0gaXNUeXBlKHR5cGVPck9wdGlvbnMpID8gZ2V0RGVmYXVsdFNlcnZpY2VPcHRpb25zPFM+KHsgc2VydmljZSB9KSA6IGdldERlZmF1bHRTZXJ2aWNlT3B0aW9ucyh0eXBlT3JPcHRpb25zKTtcblxuICBjb25zdCBtb2R1bGVNZXRhZGF0YSA9IGluaXRpYWxTZXJ2aWNlTW9kdWxlKG9wdGlvbnMpO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZShtb2R1bGVNZXRhZGF0YSk7XG4gICAgb3ZlcnJpZGVNb2R1bGVzKG9wdGlvbnMpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGNvbnN0IHRlc3RlZFNlcnZpY2UgPSAoPGFueT5UZXN0QmVkKS5pbmplY3RcbiAgICAgID8gKDx7IGluamVjdDxUPih0b2tlbjogVHlwZTxUPiwgbm90Rm91bmRWYWx1ZT86IFQpOiBUIH0gJiBUZXN0QmVkU3RhdGljPlRlc3RCZWQpLmluamVjdDxTPihzZXJ2aWNlKVxuICAgICAgOiBUZXN0QmVkLmdldChzZXJ2aWNlKTtcblxuICAgIGlmIChkb2VzU2VydmljZUltcGxlbWVudHNPbkRlc3Ryb3kodGVzdGVkU2VydmljZSkpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1saWZlLWN5Y2xlLWNhbGxcbiAgICAgIHRlc3RlZFNlcnZpY2UubmdPbkRlc3Ryb3koKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiAob3ZlcnJpZGVzPzogU3BlY3RhdG9yU2VydmljZU92ZXJyaWRlczxTPikgPT4ge1xuICAgIGNvbnN0IGRlZmF1bHRzOiBTcGVjdGF0b3JTZXJ2aWNlT3ZlcnJpZGVzPFM+ID0geyBwcm92aWRlcnM6IFtdIH07XG4gICAgY29uc3QgeyBwcm92aWRlcnMgfSA9IHsgLi4uZGVmYXVsdHMsIC4uLm92ZXJyaWRlcyB9O1xuXG4gICAgaWYgKHByb3ZpZGVycyAmJiBwcm92aWRlcnMubGVuZ3RoKSB7XG4gICAgICBwcm92aWRlcnMuZm9yRWFjaCgocHJvdmlkZXI6IFByb3ZpZGVyKSA9PiB7XG4gICAgICAgIFRlc3RCZWQub3ZlcnJpZGVQcm92aWRlcigocHJvdmlkZXIgYXMgYW55KS5wcm92aWRlLCBwcm92aWRlciBhcyBhbnkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTcGVjdGF0b3JTZXJ2aWNlPFM+KFRlc3RCZWQuaW5qZWN0ID8gVGVzdEJlZC5pbmplY3Qoc2VydmljZSkgOiBUZXN0QmVkLmdldChzZXJ2aWNlKSk7XG4gIH07XG59XG4iXX0=