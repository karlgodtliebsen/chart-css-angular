import { dispatchFakeEvent } from './dispatch-events';
import { isString, isHTMLOptionElementArray } from './types';
/**
 * Focuses a select element, selects the correct options and dispatches
 * the `change` event, simulating the user selecting an option
 * @param options Options to be selected.
 * @param element Element onto which to select the options.
 * @param config Object with extra config to dispatch change event when option selected
 *
 * selectOption('al' | ['al', 'ab'], select, config);
 */
export function selectOption(options, element, config) {
    if (!(element instanceof HTMLSelectElement)) {
        return;
    }
    element.focus();
    if (isString(options)) {
        const option = element.querySelector(`option[value="${options}"]`);
        if (!option) {
            return;
        }
        setOptionSelected(option, element, config);
    }
    else if (options instanceof HTMLOptionElement) {
        setOptionSelected(options, element, config);
    }
    else {
        if (!element.multiple) {
            return;
        }
        if (isHTMLOptionElementArray(options)) {
            options.forEach(option => setOptionSelected(option, element, config));
        }
        else {
            element.querySelectorAll('option').forEach(opt => {
                if (options.includes(opt.value)) {
                    setOptionSelected(opt, element, config);
                }
            });
        }
    }
}
/**
 * Set the option in the HTMLSelectElement to selected
 * @param option HTMLOptionElement to select
 * @param select HTMLSelectElement to add the options to
 * @param config Object with extra config to dispatch change event when option selected
 *
 * setOptionSelected(option, element, config);
 */
function setOptionSelected(option, select, config) {
    option.selected = true;
    if (config.emitEvents) {
        dispatchFakeEvent(select, 'change', true);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LW9wdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3NwZWN0YXRvci9zcmMvbGliL3NlbGVjdC1vcHRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBaUIsTUFBTSxTQUFTLENBQUM7QUFFNUU7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLFVBQVUsWUFBWSxDQUMxQixPQUFzQixFQUN0QixPQUE0RCxFQUM1RCxNQUErQjtJQUUvQixJQUFJLENBQUMsQ0FBQyxPQUFPLFlBQVksaUJBQWlCLENBQUMsRUFBRTtRQUMzQyxPQUFPO0tBQ1I7SUFFRCxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFaEIsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDckIsTUFBTSxNQUFNLEdBQTZCLE9BQU8sQ0FBQyxhQUFhLENBQUMsaUJBQWlCLE9BQU8sSUFBSSxDQUFDLENBQUM7UUFDN0YsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE9BQU87U0FDUjtRQUVELGlCQUFpQixDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDNUM7U0FBTSxJQUFJLE9BQU8sWUFBWSxpQkFBaUIsRUFBRTtRQUMvQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzdDO1NBQU07UUFDTCxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRTtZQUNyQixPQUFPO1NBQ1I7UUFFRCxJQUFJLHdCQUF3QixDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDdkU7YUFBTTtZQUNMLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQy9DLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQy9CLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7aUJBQ3pDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtLQUNGO0FBQ0gsQ0FBQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxTQUFTLGlCQUFpQixDQUFDLE1BQXlCLEVBQUUsTUFBeUIsRUFBRSxNQUErQjtJQUM5RyxNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztJQUN2QixJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7UUFDckIsaUJBQWlCLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUMzQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkaXNwYXRjaEZha2VFdmVudCB9IGZyb20gJy4vZGlzcGF0Y2gtZXZlbnRzJztcbmltcG9ydCB7IGlzU3RyaW5nLCBpc0hUTUxPcHRpb25FbGVtZW50QXJyYXksIFNlbGVjdE9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBGb2N1c2VzIGEgc2VsZWN0IGVsZW1lbnQsIHNlbGVjdHMgdGhlIGNvcnJlY3Qgb3B0aW9ucyBhbmQgZGlzcGF0Y2hlc1xuICogdGhlIGBjaGFuZ2VgIGV2ZW50LCBzaW11bGF0aW5nIHRoZSB1c2VyIHNlbGVjdGluZyBhbiBvcHRpb25cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgdG8gYmUgc2VsZWN0ZWQuXG4gKiBAcGFyYW0gZWxlbWVudCBFbGVtZW50IG9udG8gd2hpY2ggdG8gc2VsZWN0IHRoZSBvcHRpb25zLlxuICogQHBhcmFtIGNvbmZpZyBPYmplY3Qgd2l0aCBleHRyYSBjb25maWcgdG8gZGlzcGF0Y2ggY2hhbmdlIGV2ZW50IHdoZW4gb3B0aW9uIHNlbGVjdGVkXG4gKlxuICogc2VsZWN0T3B0aW9uKCdhbCcgfCBbJ2FsJywgJ2FiJ10sIHNlbGVjdCwgY29uZmlnKTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdE9wdGlvbihcbiAgb3B0aW9uczogU2VsZWN0T3B0aW9ucyxcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQgfCBIVE1MU2VsZWN0RWxlbWVudCB8IERvY3VtZW50IHwgV2luZG93LFxuICBjb25maWc6IHsgZW1pdEV2ZW50czogYm9vbGVhbiB9XG4pOiB2b2lkIHtcbiAgaWYgKCEoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGVsZW1lbnQuZm9jdXMoKTtcblxuICBpZiAoaXNTdHJpbmcob3B0aW9ucykpIHtcbiAgICBjb25zdCBvcHRpb246IEhUTUxPcHRpb25FbGVtZW50IHwgbnVsbCA9IGVsZW1lbnQucXVlcnlTZWxlY3Rvcihgb3B0aW9uW3ZhbHVlPVwiJHtvcHRpb25zfVwiXWApO1xuICAgIGlmICghb3B0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2V0T3B0aW9uU2VsZWN0ZWQob3B0aW9uLCBlbGVtZW50LCBjb25maWcpO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBIVE1MT3B0aW9uRWxlbWVudCkge1xuICAgIHNldE9wdGlvblNlbGVjdGVkKG9wdGlvbnMsIGVsZW1lbnQsIGNvbmZpZyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFlbGVtZW50Lm11bHRpcGxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzSFRNTE9wdGlvbkVsZW1lbnRBcnJheShvcHRpb25zKSkge1xuICAgICAgb3B0aW9ucy5mb3JFYWNoKG9wdGlvbiA9PiBzZXRPcHRpb25TZWxlY3RlZChvcHRpb24sIGVsZW1lbnQsIGNvbmZpZykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ29wdGlvbicpLmZvckVhY2gob3B0ID0+IHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaW5jbHVkZXMob3B0LnZhbHVlKSkge1xuICAgICAgICAgIHNldE9wdGlvblNlbGVjdGVkKG9wdCwgZWxlbWVudCwgY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogU2V0IHRoZSBvcHRpb24gaW4gdGhlIEhUTUxTZWxlY3RFbGVtZW50IHRvIHNlbGVjdGVkXG4gKiBAcGFyYW0gb3B0aW9uIEhUTUxPcHRpb25FbGVtZW50IHRvIHNlbGVjdFxuICogQHBhcmFtIHNlbGVjdCBIVE1MU2VsZWN0RWxlbWVudCB0byBhZGQgdGhlIG9wdGlvbnMgdG9cbiAqIEBwYXJhbSBjb25maWcgT2JqZWN0IHdpdGggZXh0cmEgY29uZmlnIHRvIGRpc3BhdGNoIGNoYW5nZSBldmVudCB3aGVuIG9wdGlvbiBzZWxlY3RlZFxuICpcbiAqIHNldE9wdGlvblNlbGVjdGVkKG9wdGlvbiwgZWxlbWVudCwgY29uZmlnKTtcbiAqL1xuZnVuY3Rpb24gc2V0T3B0aW9uU2VsZWN0ZWQob3B0aW9uOiBIVE1MT3B0aW9uRWxlbWVudCwgc2VsZWN0OiBIVE1MU2VsZWN0RWxlbWVudCwgY29uZmlnOiB7IGVtaXRFdmVudHM6IGJvb2xlYW4gfSk6IHZvaWQge1xuICBvcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xuICBpZiAoY29uZmlnLmVtaXRFdmVudHMpIHtcbiAgICBkaXNwYXRjaEZha2VFdmVudChzZWxlY3QsICdjaGFuZ2UnLCB0cnVlKTtcbiAgfVxufVxuIl19