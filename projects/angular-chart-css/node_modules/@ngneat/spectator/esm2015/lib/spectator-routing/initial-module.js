import { ActivatedRoute, Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { Subject } from 'rxjs';
import { initialSpectatorModule } from '../spectator/initial-module';
import { ActivatedRouteStub } from './activated-route-stub';
import { RouterLinkDirectiveStub } from './router-link-stub';
import { RouterStub } from './router-stub';
/**
 * @internal
 */
export function initialRoutingModule(options) {
    const moduleMetadata = initialSpectatorModule(options);
    if (options.mockRouterLinks && options.stubsEnabled) {
        moduleMetadata.declarations.push(RouterLinkDirectiveStub);
    }
    if (options.stubsEnabled) {
        moduleMetadata.providers.push(options.mockProvider(RouterStub, {
            events: new Subject(),
            emitRouterEvent(event) {
                this.events.next(event);
            }
        }), {
            provide: Router,
            useExisting: RouterStub
        });
        moduleMetadata.providers.push({
            provide: ActivatedRouteStub,
            useValue: new ActivatedRouteStub({
                params: options.params,
                queryParams: options.queryParams,
                data: options.data
            })
        }, {
            provide: ActivatedRoute,
            useExisting: ActivatedRouteStub
        });
    }
    else {
        moduleMetadata.imports.push(RouterTestingModule.withRoutes(options.routes));
    }
    return moduleMetadata;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbC1tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcGVjdGF0b3Ivc3JjL2xpYi9zcGVjdGF0b3Itcm91dGluZy9pbml0aWFsLW1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFTLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHL0IsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFckUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFNUQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDN0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQzs7R0FFRztBQUNILE1BQU0sVUFBVSxvQkFBb0IsQ0FBSSxPQUE2QztJQUNuRixNQUFNLGNBQWMsR0FBRyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUV2RCxJQUFJLE9BQU8sQ0FBQyxlQUFlLElBQUksT0FBTyxDQUFDLFlBQVksRUFBRTtRQUNuRCxjQUFjLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0tBQzNEO0lBRUQsSUFBSSxPQUFPLENBQUMsWUFBWSxFQUFFO1FBQ3hCLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUMzQixPQUFPLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRTtZQUMvQixNQUFNLEVBQUUsSUFBSSxPQUFPLEVBQVM7WUFDNUIsZUFBZSxDQUFDLEtBQVk7Z0JBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFCLENBQUM7U0FDRixDQUFDLEVBQ0Y7WUFDRSxPQUFPLEVBQUUsTUFBTTtZQUNmLFdBQVcsRUFBRSxVQUFVO1NBQ3hCLENBQ0YsQ0FBQztRQUVGLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUMzQjtZQUNFLE9BQU8sRUFBRSxrQkFBa0I7WUFDM0IsUUFBUSxFQUFFLElBQUksa0JBQWtCLENBQUM7Z0JBQy9CLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtnQkFDdEIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXO2dCQUNoQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7YUFDbkIsQ0FBQztTQUNILEVBQ0Q7WUFDRSxPQUFPLEVBQUUsY0FBYztZQUN2QixXQUFXLEVBQUUsa0JBQWtCO1NBQ2hDLENBQ0YsQ0FBQztLQUNIO1NBQU07UUFDTCxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7S0FDN0U7SUFFRCxPQUFPLGNBQWMsQ0FBQztBQUN4QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIEV2ZW50LCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgUm91dGVyVGVzdGluZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlci90ZXN0aW5nJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgTW9kdWxlTWV0YWRhdGEgfSBmcm9tICcuLi9iYXNlL2luaXRpYWwtbW9kdWxlJztcbmltcG9ydCB7IGluaXRpYWxTcGVjdGF0b3JNb2R1bGUgfSBmcm9tICcuLi9zcGVjdGF0b3IvaW5pdGlhbC1tb2R1bGUnO1xuXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZVN0dWIgfSBmcm9tICcuL2FjdGl2YXRlZC1yb3V0ZS1zdHViJztcbmltcG9ydCB7IFNwZWN0YXRvclJvdXRpbmdPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB7IFJvdXRlckxpbmtEaXJlY3RpdmVTdHViIH0gZnJvbSAnLi9yb3V0ZXItbGluay1zdHViJztcbmltcG9ydCB7IFJvdXRlclN0dWIgfSBmcm9tICcuL3JvdXRlci1zdHViJztcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxSb3V0aW5nTW9kdWxlPFM+KG9wdGlvbnM6IFJlcXVpcmVkPFNwZWN0YXRvclJvdXRpbmdPcHRpb25zPFM+Pik6IE1vZHVsZU1ldGFkYXRhIHtcbiAgY29uc3QgbW9kdWxlTWV0YWRhdGEgPSBpbml0aWFsU3BlY3RhdG9yTW9kdWxlKG9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zLm1vY2tSb3V0ZXJMaW5rcyAmJiBvcHRpb25zLnN0dWJzRW5hYmxlZCkge1xuICAgIG1vZHVsZU1ldGFkYXRhLmRlY2xhcmF0aW9ucy5wdXNoKFJvdXRlckxpbmtEaXJlY3RpdmVTdHViKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLnN0dWJzRW5hYmxlZCkge1xuICAgIG1vZHVsZU1ldGFkYXRhLnByb3ZpZGVycy5wdXNoKFxuICAgICAgb3B0aW9ucy5tb2NrUHJvdmlkZXIoUm91dGVyU3R1Yiwge1xuICAgICAgICBldmVudHM6IG5ldyBTdWJqZWN0PEV2ZW50PigpLFxuICAgICAgICBlbWl0Um91dGVyRXZlbnQoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgICAgICAgdGhpcy5ldmVudHMubmV4dChldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAge1xuICAgICAgICBwcm92aWRlOiBSb3V0ZXIsXG4gICAgICAgIHVzZUV4aXN0aW5nOiBSb3V0ZXJTdHViXG4gICAgICB9XG4gICAgKTtcblxuICAgIG1vZHVsZU1ldGFkYXRhLnByb3ZpZGVycy5wdXNoKFxuICAgICAge1xuICAgICAgICBwcm92aWRlOiBBY3RpdmF0ZWRSb3V0ZVN0dWIsXG4gICAgICAgIHVzZVZhbHVlOiBuZXcgQWN0aXZhdGVkUm91dGVTdHViKHtcbiAgICAgICAgICBwYXJhbXM6IG9wdGlvbnMucGFyYW1zLFxuICAgICAgICAgIHF1ZXJ5UGFyYW1zOiBvcHRpb25zLnF1ZXJ5UGFyYW1zLFxuICAgICAgICAgIGRhdGE6IG9wdGlvbnMuZGF0YVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcHJvdmlkZTogQWN0aXZhdGVkUm91dGUsXG4gICAgICAgIHVzZUV4aXN0aW5nOiBBY3RpdmF0ZWRSb3V0ZVN0dWJcbiAgICAgIH1cbiAgICApO1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZU1ldGFkYXRhLmltcG9ydHMucHVzaChSb3V0ZXJUZXN0aW5nTW9kdWxlLndpdGhSb3V0ZXMob3B0aW9ucy5yb3V0ZXMpKTtcbiAgfVxuXG4gIHJldHVybiBtb2R1bGVNZXRhZGF0YTtcbn1cbiJdfQ==