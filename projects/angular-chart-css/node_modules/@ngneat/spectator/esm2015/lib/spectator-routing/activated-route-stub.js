import { convertToParamMap, ActivatedRoute, ActivatedRouteSnapshot } from '@angular/router';
import { ReplaySubject } from 'rxjs';
import { map } from 'rxjs/operators';
/**
 * @publicApi
 *
 * Utility class for stubbing ActivatedRoute of @angular/router
 */
export class ActivatedRouteStub extends ActivatedRoute {
    constructor(options) {
        super();
        this.testParams = {};
        this.testQueryParams = {};
        this.testData = {};
        this.testFragment = null;
        this.testUrl = [];
        this.testRoot = null;
        this.testParent = null;
        this.testFirstChild = null;
        this.testChildren = null;
        this.paramsSubject = new ReplaySubject(1);
        this.queryParamsSubject = new ReplaySubject(1);
        this.dataSubject = new ReplaySubject(1);
        this.fragmentSubject = new ReplaySubject(1);
        this.urlSubject = new ReplaySubject(1);
        if (options) {
            this.testParams = options.params || {};
            this.testQueryParams = options.queryParams || {};
            this.testData = options.data || {};
            this.testFragment = options.fragment || null;
            this.testUrl = options.url || [];
            this.testRoot = options.root || null;
            this.testParent = options.parent || null;
            this.testFirstChild = options.firstChild || null;
            this.testChildren = options.children || null;
        }
        this.params = this.paramsSubject.asObservable();
        this.queryParams = this.queryParamsSubject.asObservable();
        this.data = this.dataSubject.asObservable();
        this.fragment = this.fragmentSubject.asObservable();
        this.url = this.urlSubject.asObservable();
        this.snapshot = this.buildSnapshot();
        this.triggerNavigation();
    }
    get paramMap() {
        return this.paramsSubject.asObservable().pipe(map(params => convertToParamMap(params)));
    }
    setParams(params) {
        this.testParams = params;
        this.snapshot = this.buildSnapshot();
    }
    setParam(name, value) {
        this.testParams = Object.assign(Object.assign({}, this.testParams), { [name]: value });
        this.snapshot = this.buildSnapshot();
    }
    setQueryParams(queryParams) {
        this.testQueryParams = queryParams;
        this.snapshot = this.buildSnapshot();
    }
    setQueryParam(name, value) {
        this.testQueryParams = Object.assign(Object.assign({}, this.testQueryParams), { [name]: value });
        this.snapshot = this.buildSnapshot();
    }
    setAllData(data) {
        this.testData = data;
        this.snapshot = this.buildSnapshot();
    }
    setData(name, value) {
        this.testData = Object.assign(Object.assign({}, this.testData), { [name]: value });
        this.snapshot = this.buildSnapshot();
    }
    setFragment(fragment) {
        this.testFragment = fragment;
        this.snapshot = this.buildSnapshot();
    }
    setUrl(url) {
        this.testUrl = url;
        this.snapshot = this.buildSnapshot();
    }
    get root() {
        return this.testRoot || this;
    }
    get parent() {
        return this.testParent || null;
    }
    get children() {
        return this.testChildren || [this];
    }
    get firstChild() {
        return this.testFirstChild || null;
    }
    /**
     * Simulates a route navigation by updating the Params, QueryParams and Data observable streams.
     */
    triggerNavigation() {
        this.paramsSubject.next(this.testParams);
        this.queryParamsSubject.next(this.testQueryParams);
        this.dataSubject.next(this.testData);
        this.fragmentSubject.next(this.testFragment);
        this.urlSubject.next(this.testUrl);
    }
    toString() {
        return 'activatedRouteStub';
    }
    buildSnapshot() {
        const snapshot = new ActivatedRouteSnapshot();
        snapshot.params = this.testParams;
        snapshot.queryParams = this.testQueryParams;
        snapshot.data = this.testData;
        snapshot.fragment = this.testFragment;
        snapshot.url = this.testUrl;
        return snapshot;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZhdGVkLXJvdXRlLXN0dWIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcGVjdGF0b3Ivc3JjL2xpYi9zcGVjdGF0b3Itcm91dGluZy9hY3RpdmF0ZWQtcm91dGUtc3R1Yi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLHNCQUFzQixFQUFzQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2hJLE9BQU8sRUFBYyxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSXJDOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsY0FBYztJQWlCcEQsWUFBWSxPQUFzQjtRQUNoQyxLQUFLLEVBQUUsQ0FBQztRQWpCRixlQUFVLEdBQVcsRUFBRSxDQUFDO1FBQ3hCLG9CQUFlLEdBQVcsRUFBRSxDQUFDO1FBQzdCLGFBQVEsR0FBUyxFQUFFLENBQUM7UUFDcEIsaUJBQVksR0FBa0IsSUFBSSxDQUFDO1FBQ25DLFlBQU8sR0FBaUIsRUFBRSxDQUFDO1FBQzNCLGFBQVEsR0FBOEIsSUFBSSxDQUFDO1FBQzNDLGVBQVUsR0FBOEIsSUFBSSxDQUFDO1FBQzdDLG1CQUFjLEdBQThCLElBQUksQ0FBQztRQUNqRCxpQkFBWSxHQUFnQyxJQUFJLENBQUM7UUFFeEMsa0JBQWEsR0FBRyxJQUFJLGFBQWEsQ0FBUyxDQUFDLENBQUMsQ0FBQztRQUM3Qyx1QkFBa0IsR0FBRyxJQUFJLGFBQWEsQ0FBUyxDQUFDLENBQUMsQ0FBQztRQUNsRCxnQkFBVyxHQUFHLElBQUksYUFBYSxDQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLG9CQUFlLEdBQUcsSUFBSSxhQUFhLENBQWdCLENBQUMsQ0FBQyxDQUFDO1FBQ3RELGVBQVUsR0FBRyxJQUFJLGFBQWEsQ0FBZSxDQUFDLENBQUMsQ0FBQztR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LENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVNLFFBQVE7UUFDYixPQUFPLG9CQUFvQixDQUFDO0lBQzlCLENBQUM7SUFFTyxhQUFhO1FBQ25CLE1BQU0sUUFBUSxHQUFHLElBQUksc0JBQXNCLEVBQUUsQ0FBQztRQUU5QyxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDbEMsUUFBUSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQzVDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM5QixRQUFRLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFhLENBQUM7UUFDdkMsUUFBUSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBRTVCLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnZlcnRUb1BhcmFtTWFwLCBBY3RpdmF0ZWRSb3V0ZSwgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgRGF0YSwgUGFyYW1zLCBQYXJhbU1hcCwgVXJsU2VnbWVudCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFJvdXRlT3B0aW9ucyB9IGZyb20gJy4vcm91dGUtb3B0aW9ucyc7XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICpcbiAqIFV0aWxpdHkgY2xhc3MgZm9yIHN0dWJiaW5nIEFjdGl2YXRlZFJvdXRlIG9mIEBhbmd1bGFyL3JvdXRlclxuICovXG5leHBvcnQgY2xhc3MgQWN0aXZhdGVkUm91dGVTdHViIGV4dGVuZHMgQWN0aXZhdGVkUm91dGUge1xuICBwcml2YXRlIHRlc3RQYXJhbXM6IFBhcmFtcyA9IHt9O1xuICBwcml2YXRlIHRlc3RRdWVyeVBhcmFtczogUGFyYW1zID0ge307XG4gIHByaXZhdGUgdGVzdERhdGE6IERhdGEgPSB7fTtcbiAgcHJpdmF0ZSB0ZXN0RnJhZ21lbnQ6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIHRlc3RVcmw6IFVybFNlZ21lbnRbXSA9IFtdO1xuICBwcml2YXRlIHRlc3RSb290OiBBY3RpdmF0ZWRSb3V0ZVN0dWIgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSB0ZXN0UGFyZW50OiBBY3RpdmF0ZWRSb3V0ZVN0dWIgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSB0ZXN0Rmlyc3RDaGlsZDogQWN0aXZhdGVkUm91dGVTdHViIHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgdGVzdENoaWxkcmVuOiBBY3RpdmF0ZWRSb3V0ZVN0dWJbXSB8IG51bGwgPSBudWxsO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgcGFyYW1zU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PFBhcmFtcz4oMSk7XG4gIHByaXZhdGUgcmVhZG9ubHkgcXVlcnlQYXJhbXNTdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8UGFyYW1zPigxKTtcbiAgcHJpdmF0ZSByZWFkb25seSBkYXRhU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PERhdGE+KDEpO1xuICBwcml2YXRlIHJlYWRvbmx5IGZyYWdtZW50U3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PHN0cmluZyB8IG51bGw+KDEpO1xuICBwcml2YXRlIHJlYWRvbmx5IHVybFN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxVcmxTZWdtZW50W10+KDEpO1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBSb3V0ZU9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMudGVzdFBhcmFtcyA9IG9wdGlvbnMucGFyYW1zIHx8IHt9O1xuICAgICAgdGhpcy50ZXN0UXVlcnlQYXJhbXMgPSBvcHRpb25zLnF1ZXJ5UGFyYW1zIHx8IHt9O1xuICAgICAgdGhpcy50ZXN0RGF0YSA9IG9wdGlvbnMuZGF0YSB8fCB7fTtcbiAgICAgIHRoaXMudGVzdEZyYWdtZW50ID0gb3B0aW9ucy5mcmFnbWVudCB8fCBudWxsO1xuICAgICAgdGhpcy50ZXN0VXJsID0gb3B0aW9ucy51cmwgfHwgW107XG4gICAgICB0aGlzLnRlc3RSb290ID0gb3B0aW9ucy5yb290IHx8IG51bGw7XG4gICAgICB0aGlzLnRlc3RQYXJlbnQgPSBvcHRpb25zLnBhcmVudCB8fCBudWxsO1xuICAgICAgdGhpcy50ZXN0Rmlyc3RDaGlsZCA9IG9wdGlvbnMuZmlyc3RDaGlsZCB8fCBudWxsO1xuICAgICAgdGhpcy50ZXN0Q2hpbGRyZW4gPSBvcHRpb25zLmNoaWxkcmVuIHx8IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5wYXJhbXMgPSB0aGlzLnBhcmFtc1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgdGhpcy5xdWVyeVBhcmFtcyA9IHRoaXMucXVlcnlQYXJhbXNTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgIHRoaXMuZGF0YSA9IHRoaXMuZGF0YVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgdGhpcy5mcmFnbWVudCA9IHRoaXMuZnJhZ21lbnRTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpIGFzIE9ic2VydmFibGU8c3RyaW5nPjtcbiAgICB0aGlzLnVybCA9IHRoaXMudXJsU3ViamVjdC5hc09ic2VydmFibGUoKSBhcyBPYnNlcnZhYmxlPFVybFNlZ21lbnRbXT47XG5cbiAgICB0aGlzLnNuYXBzaG90ID0gdGhpcy5idWlsZFNuYXBzaG90KCk7XG5cbiAgICB0aGlzLnRyaWdnZXJOYXZpZ2F0aW9uKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHBhcmFtTWFwKCk6IE9ic2VydmFibGU8UGFyYW1NYXA+IHtcbiAgICByZXR1cm4gdGhpcy5wYXJhbXNTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpLnBpcGUobWFwKHBhcmFtcyA9PiBjb252ZXJ0VG9QYXJhbU1hcChwYXJhbXMpKSk7XG4gIH1cblxuICBwdWJsaWMgc25hcHNob3Q6IEFjdGl2YXRlZFJvdXRlU25hcHNob3Q7XG5cbiAgcHVibGljIHNldFBhcmFtcyhwYXJhbXM6IFBhcmFtcyk6IHZvaWQge1xuICAgIHRoaXMudGVzdFBhcmFtcyA9IHBhcmFtcztcbiAgICB0aGlzLnNuYXBzaG90ID0gdGhpcy5idWlsZFNuYXBzaG90KCk7XG4gIH1cblxuICBwdWJsaWMgc2V0UGFyYW0obmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy50ZXN0UGFyYW1zID0geyAuLi50aGlzLnRlc3RQYXJhbXMsIFtuYW1lXTogdmFsdWUgfTtcbiAgICB0aGlzLnNuYXBzaG90ID0gdGhpcy5idWlsZFNuYXBzaG90KCk7XG4gIH1cblxuICBwdWJsaWMgc2V0UXVlcnlQYXJhbXMocXVlcnlQYXJhbXM6IFBhcmFtcyk6IHZvaWQge1xuICAgIHRoaXMudGVzdFF1ZXJ5UGFyYW1zID0gcXVlcnlQYXJhbXM7XG4gICAgdGhpcy5zbmFwc2hvdCA9IHRoaXMuYnVpbGRTbmFwc2hvdCgpO1xuICB9XG5cbiAgcHVibGljIHNldFF1ZXJ5UGFyYW0obmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy50ZXN0UXVlcnlQYXJhbXMgPSB7IC4uLnRoaXMudGVzdFF1ZXJ5UGFyYW1zLCBbbmFtZV06IHZhbHVlIH07XG4gICAgdGhpcy5zbmFwc2hvdCA9IHRoaXMuYnVpbGRTbmFwc2hvdCgpO1xuICB9XG5cbiAgcHVibGljIHNldEFsbERhdGEoZGF0YTogRGF0YSk6IHZvaWQge1xuICAgIHRoaXMudGVzdERhdGEgPSBkYXRhO1xuICAgIHRoaXMuc25hcHNob3QgPSB0aGlzLmJ1aWxkU25hcHNob3QoKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXREYXRhKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMudGVzdERhdGEgPSB7IC4uLnRoaXMudGVzdERhdGEsIFtuYW1lXTogdmFsdWUgfTtcbiAgICB0aGlzLnNuYXBzaG90ID0gdGhpcy5idWlsZFNuYXBzaG90KCk7XG4gIH1cblxuICBwdWJsaWMgc2V0RnJhZ21lbnQoZnJhZ21lbnQ6IHN0cmluZyB8IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLnRlc3RGcmFnbWVudCA9IGZyYWdtZW50O1xuICAgIHRoaXMuc25hcHNob3QgPSB0aGlzLmJ1aWxkU25hcHNob3QoKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRVcmwodXJsOiBVcmxTZWdtZW50W10pOiB2b2lkIHtcbiAgICB0aGlzLnRlc3RVcmwgPSB1cmw7XG4gICAgdGhpcy5zbmFwc2hvdCA9IHRoaXMuYnVpbGRTbmFwc2hvdCgpO1xuICB9XG5cbiAgcHVibGljIGdldCByb290KCk6IEFjdGl2YXRlZFJvdXRlU3R1YiB7XG4gICAgcmV0dXJuIHRoaXMudGVzdFJvb3QgfHwgdGhpcztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgcGFyZW50KCk6IEFjdGl2YXRlZFJvdXRlU3R1YiB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLnRlc3RQYXJlbnQgfHwgbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY2hpbGRyZW4oKTogQWN0aXZhdGVkUm91dGVTdHViW10ge1xuICAgIHJldHVybiB0aGlzLnRlc3RDaGlsZHJlbiB8fCBbdGhpc107XG4gIH1cblxuICBwdWJsaWMgZ2V0IGZpcnN0Q2hpbGQoKTogQWN0aXZhdGVkUm91dGVTdHViIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMudGVzdEZpcnN0Q2hpbGQgfHwgbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaW11bGF0ZXMgYSByb3V0ZSBuYXZpZ2F0aW9uIGJ5IHVwZGF0aW5nIHRoZSBQYXJhbXMsIFF1ZXJ5UGFyYW1zIGFuZCBEYXRhIG9ic2VydmFibGUgc3RyZWFtcy5cbiAgICovXG4gIHB1YmxpYyB0cmlnZ2VyTmF2aWdhdGlvbigpOiB2b2lkIHtcbiAgICB0aGlzLnBhcmFtc1N1YmplY3QubmV4dCh0aGlzLnRlc3RQYXJhbXMpO1xuICAgIHRoaXMucXVlcnlQYXJhbXNTdWJqZWN0Lm5leHQodGhpcy50ZXN0UXVlcnlQYXJhbXMpO1xuICAgIHRoaXMuZGF0YVN1YmplY3QubmV4dCh0aGlzLnRlc3REYXRhKTtcbiAgICB0aGlzLmZyYWdtZW50U3ViamVjdC5uZXh0KHRoaXMudGVzdEZyYWdtZW50KTtcbiAgICB0aGlzLnVybFN1YmplY3QubmV4dCh0aGlzLnRlc3RVcmwpO1xuICB9XG5cbiAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdhY3RpdmF0ZWRSb3V0ZVN0dWInO1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZFNuYXBzaG90KCk6IEFjdGl2YXRlZFJvdXRlU25hcHNob3Qge1xuICAgIGNvbnN0IHNuYXBzaG90ID0gbmV3IEFjdGl2YXRlZFJvdXRlU25hcHNob3QoKTtcblxuICAgIHNuYXBzaG90LnBhcmFtcyA9IHRoaXMudGVzdFBhcmFtcztcbiAgICBzbmFwc2hvdC5xdWVyeVBhcmFtcyA9IHRoaXMudGVzdFF1ZXJ5UGFyYW1zO1xuICAgIHNuYXBzaG90LmRhdGEgPSB0aGlzLnRlc3REYXRhO1xuICAgIHNuYXBzaG90LmZyYWdtZW50ID0gdGhpcy50ZXN0RnJhZ21lbnQhO1xuICAgIHNuYXBzaG90LnVybCA9IHRoaXMudGVzdFVybDtcblxuICAgIHJldHVybiBzbmFwc2hvdDtcbiAgfVxufVxuIl19