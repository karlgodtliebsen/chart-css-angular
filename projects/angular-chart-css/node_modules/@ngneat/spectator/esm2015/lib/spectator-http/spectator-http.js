import { BaseSpectator } from '../base/base-spectator';
/**
 * @publicApi
 */
export var HttpMethod;
(function (HttpMethod) {
    HttpMethod["GET"] = "GET";
    HttpMethod["POST"] = "POST";
    HttpMethod["DELETE"] = "DELETE";
    HttpMethod["PUT"] = "PUT";
    HttpMethod["PATCH"] = "PATCH";
    HttpMethod["HEAD"] = "HEAD";
    HttpMethod["JSONP"] = "JSONP";
    HttpMethod["OPTIONS"] = "OPTIONS";
})(HttpMethod || (HttpMethod = {}));
/**
 * @publicApi
 */
export class SpectatorHttp extends BaseSpectator {
    constructor(service, httpClient, controller) {
        super();
        this.service = service;
        this.httpClient = httpClient;
        this.controller = controller;
        // small workaround to prevent issues if destructuring SpectatorHttp, which was common in Spectator 3
        // remove in v5?
        this.expectOne = this.expectOne.bind(this);
        this.expectConcurrent = this.expectConcurrent.bind(this);
    }
    expectOne(url, method) {
        expect(true).toBe(true); // workaround to avoid `Spec has no expectations` https://github.com/NetanelBasal/spectator/issues/75
        const req = this.controller.expectOne({
            url,
            method
        });
        // assert that there are no outstanding requests.
        this.controller.verify();
        return req;
    }
    expectConcurrent(expectations) {
        const requests = expectations.map((expectation) => {
            return this.controller.expectOne({
                url: expectation.url,
                method: expectation.method
            });
        });
        this.controller.verify();
        return requests;
    }
    flushAll(requests, args) {
        requests.forEach((request, idx) => {
            request.flush(args[idx]);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY3RhdG9yLWh0dHAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcGVjdGF0b3Ivc3JjL2xpYi9zcGVjdGF0b3ItaHR0cC9zcGVjdGF0b3ItaHR0cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFdkQ7O0dBRUc7QUFDSCxNQUFNLENBQU4sSUFBWSxVQVNYO0FBVEQsV0FBWSxVQUFVO0lBQ3BCLHlCQUFXLENBQUE7SUFDWCwyQkFBYSxDQUFBO0lBQ2IsK0JBQWlCLENBQUE7SUFDakIseUJBQVcsQ0FBQTtJQUNYLDZCQUFlLENBQUE7SUFDZiwyQkFBYSxDQUFBO0lBQ2IsNkJBQWUsQ0FBQTtJQUNmLGlDQUFtQixDQUFBO0FBQ3JCLENBQUMsRUFUVyxVQUFVLEtBQVYsVUFBVSxRQVNyQjtBQU9EOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGFBQWlCLFNBQVEsYUFBYTtJQUNqRCxZQUFtQixPQUFVLEVBQVMsVUFBc0IsRUFBUyxVQUFpQztRQUNwRyxLQUFLLEVBQUUsQ0FBQztRQURTLFlBQU8sR0FBUCxPQUFPLENBQUc7UUFBUyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVMsZUFBVSxHQUFWLFVBQVUsQ0FBdUI7UUFHcEcscUdBQXFHO1FBQ3JHLGdCQUFnQjtRQUNoQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFTSxTQUFTLENBQUMsR0FBVyxFQUFFLE1BQWtCO1FBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxxR0FBcUc7UUFFOUgsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUM7WUFDcEMsR0FBRztZQUNILE1BQU07U0FDUCxDQUFDLENBQUM7UUFFSCxpREFBaUQ7UUFDakQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUV6QixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxZQUEwQjtRQUNoRCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBdUIsRUFBRSxFQUFFO1lBQzVELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUM7Z0JBQy9CLEdBQUcsRUFBRSxXQUFXLENBQUMsR0FBRztnQkFDcEIsTUFBTSxFQUFFLFdBQVcsQ0FBQyxNQUFNO2FBQzNCLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUV6QixPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRU0sUUFBUSxDQUFDLFFBQXVCLEVBQUUsSUFBVztRQUNsRCxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBb0IsRUFBRSxHQUFXLEVBQUUsRUFBRTtZQUNyRCxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEh0dHBUZXN0aW5nQ29udHJvbGxlciwgVGVzdFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cC90ZXN0aW5nJztcblxuaW1wb3J0IHsgQmFzZVNwZWN0YXRvciB9IGZyb20gJy4uL2Jhc2UvYmFzZS1zcGVjdGF0b3InO1xuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGVudW0gSHR0cE1ldGhvZCB7XG4gIEdFVCA9ICdHRVQnLFxuICBQT1NUID0gJ1BPU1QnLFxuICBERUxFVEUgPSAnREVMRVRFJyxcbiAgUFVUID0gJ1BVVCcsXG4gIFBBVENIID0gJ1BBVENIJyxcbiAgSEVBRCA9ICdIRUFEJyxcbiAgSlNPTlAgPSAnSlNPTlAnLFxuICBPUFRJT05TID0gJ09QVElPTlMnXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSHR0cEV4cGVjdCB7XG4gIHVybDogc3RyaW5nO1xuICBtZXRob2Q6IEh0dHBNZXRob2Q7XG59XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY2xhc3MgU3BlY3RhdG9ySHR0cDxTPiBleHRlbmRzIEJhc2VTcGVjdGF0b3Ige1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgc2VydmljZTogUywgcHVibGljIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsIHB1YmxpYyBjb250cm9sbGVyOiBIdHRwVGVzdGluZ0NvbnRyb2xsZXIpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLy8gc21hbGwgd29ya2Fyb3VuZCB0byBwcmV2ZW50IGlzc3VlcyBpZiBkZXN0cnVjdHVyaW5nIFNwZWN0YXRvckh0dHAsIHdoaWNoIHdhcyBjb21tb24gaW4gU3BlY3RhdG9yIDNcbiAgICAvLyByZW1vdmUgaW4gdjU/XG4gICAgdGhpcy5leHBlY3RPbmUgPSB0aGlzLmV4cGVjdE9uZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZXhwZWN0Q29uY3VycmVudCA9IHRoaXMuZXhwZWN0Q29uY3VycmVudC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgcHVibGljIGV4cGVjdE9uZSh1cmw6IHN0cmluZywgbWV0aG9kOiBIdHRwTWV0aG9kKTogVGVzdFJlcXVlc3Qge1xuICAgIGV4cGVjdCh0cnVlKS50b0JlKHRydWUpOyAvLyB3b3JrYXJvdW5kIHRvIGF2b2lkIGBTcGVjIGhhcyBubyBleHBlY3RhdGlvbnNgIGh0dHBzOi8vZ2l0aHViLmNvbS9OZXRhbmVsQmFzYWwvc3BlY3RhdG9yL2lzc3Vlcy83NVxuXG4gICAgY29uc3QgcmVxID0gdGhpcy5jb250cm9sbGVyLmV4cGVjdE9uZSh7XG4gICAgICB1cmwsXG4gICAgICBtZXRob2RcbiAgICB9KTtcblxuICAgIC8vIGFzc2VydCB0aGF0IHRoZXJlIGFyZSBubyBvdXRzdGFuZGluZyByZXF1ZXN0cy5cbiAgICB0aGlzLmNvbnRyb2xsZXIudmVyaWZ5KCk7XG5cbiAgICByZXR1cm4gcmVxO1xuICB9XG5cbiAgcHVibGljIGV4cGVjdENvbmN1cnJlbnQoZXhwZWN0YXRpb25zOiBIdHRwRXhwZWN0W10pOiBUZXN0UmVxdWVzdFtdIHtcbiAgICBjb25zdCByZXF1ZXN0cyA9IGV4cGVjdGF0aW9ucy5tYXAoKGV4cGVjdGF0aW9uOiBIdHRwRXhwZWN0KSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5jb250cm9sbGVyLmV4cGVjdE9uZSh7XG4gICAgICAgIHVybDogZXhwZWN0YXRpb24udXJsLFxuICAgICAgICBtZXRob2Q6IGV4cGVjdGF0aW9uLm1ldGhvZFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmNvbnRyb2xsZXIudmVyaWZ5KCk7XG5cbiAgICByZXR1cm4gcmVxdWVzdHM7XG4gIH1cblxuICBwdWJsaWMgZmx1c2hBbGwocmVxdWVzdHM6IFRlc3RSZXF1ZXN0W10sIGFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgcmVxdWVzdHMuZm9yRWFjaCgocmVxdWVzdDogVGVzdFJlcXVlc3QsIGlkeDogbnVtYmVyKSA9PiB7XG4gICAgICByZXF1ZXN0LmZsdXNoKGFyZ3NbaWR4XSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==