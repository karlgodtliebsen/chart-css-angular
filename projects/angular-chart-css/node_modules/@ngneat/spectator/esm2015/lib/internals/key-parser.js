import { isNumber, isString, isObject } from '../types';
export const parseKeyOptions = (keyOrKeyCode) => {
    if (isNumber(keyOrKeyCode) && keyOrKeyCode) {
        return { key: false, keyCode: keyOrKeyCode, modifiers: {} };
    }
    if (isString(keyOrKeyCode) && keyOrKeyCode) {
        return parseKey(keyOrKeyCode);
    }
    if (isObject(keyOrKeyCode)) {
        const parsedKey = parseKey(keyOrKeyCode.key);
        return Object.assign(Object.assign({}, parsedKey), { keyCode: keyOrKeyCode.keyCode });
    }
    throw new Error('keyboard.pressKey() requires a valid key or keyCode');
};
const parseKey = (keyStr) => {
    if (keyStr.indexOf('.') < 0 || '.' === keyStr) {
        return { key: keyStr, keyCode: false, modifiers: {} };
    }
    const keyParts = keyStr.split('.');
    const key = keyParts.pop();
    const modifiers = keyParts.reduce((mods, part) => {
        switch (part) {
            case 'control':
            case 'ctrl':
                mods.control = true;
                return mods;
            case 'shift':
                mods.shift = true;
                return mods;
            case 'alt':
                mods.alt = true;
                return mods;
            case 'meta':
            case 'cmd':
            case 'win':
                mods.meta = true;
                return mods;
            default:
                throw new Error(`invalid key modifier: ${part ? part : 'undefined'}, keyStr: ${keyStr}`);
        }
    }, { alt: false, control: false, shift: false, meta: false });
    return { key, keyCode: false, modifiers };
};
const ɵ0 = parseKey;
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LXBhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NwZWN0YXRvci9zcmMvbGliL2ludGVybmFscy9rZXktcGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUF3QixRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFlOUUsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsWUFBb0QsRUFBYyxFQUFFO0lBQ2xHLElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLFlBQVksRUFBRTtRQUMxQyxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQztLQUM3RDtJQUVELElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLFlBQVksRUFBRTtRQUMxQyxPQUFPLFFBQVEsQ0FBQyxZQUFzQixDQUFDLENBQUM7S0FDekM7SUFFRCxJQUFJLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBRTtRQUMxQixNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTdDLHVDQUNLLFNBQVMsS0FDWixPQUFPLEVBQUUsWUFBWSxDQUFDLE9BQU8sSUFDN0I7S0FDSDtJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztBQUN6RSxDQUFDLENBQUM7QUFFRixNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQWMsRUFBYyxFQUFFO0lBQzlDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxLQUFLLE1BQU0sRUFBRTtRQUM3QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQztLQUN2RDtJQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkMsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBWSxDQUFDO0lBQ3JDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQy9CLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO1FBQ2IsUUFBUSxJQUFJLEVBQUU7WUFDWixLQUFLLFNBQVMsQ0FBQztZQUNmLEtBQUssTUFBTTtnQkFDVCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFFcEIsT0FBTyxJQUFJLENBQUM7WUFDZCxLQUFLLE9BQU87Z0JBQ1YsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBRWxCLE9BQU8sSUFBSSxDQUFDO1lBQ2QsS0FBSyxLQUFLO2dCQUNSLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO2dCQUVoQixPQUFPLElBQUksQ0FBQztZQUNkLEtBQUssTUFBTSxDQUFDO1lBQ1osS0FBSyxLQUFLLENBQUM7WUFDWCxLQUFLLEtBQUs7Z0JBQ1IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBRWpCLE9BQU8sSUFBSSxDQUFDO1lBQ2Q7Z0JBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsYUFBYSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1NBQzVGO0lBQ0gsQ0FBQyxFQUNELEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUMxRCxDQUFDO0lBRUYsT0FBTyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxDQUFDO0FBQzVDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTnVtYmVyLCBpc1N0cmluZywgS2V5Ym9hcmRFdmVudE9wdGlvbnMsIGlzT2JqZWN0IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1vZGlmaWVyS2V5cyB7XG4gIGFsdD86IGJvb2xlYW47XG4gIGNvbnRyb2w/OiBib29sZWFuO1xuICBzaGlmdD86IGJvb2xlYW47XG4gIG1ldGE/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEtleU9wdGlvbnMge1xuICBrZXk6IHN0cmluZyB8IGZhbHNlO1xuICBrZXlDb2RlOiBudW1iZXIgfCBmYWxzZTtcbiAgbW9kaWZpZXJzOiBNb2RpZmllcktleXM7XG59XG5cbmV4cG9ydCBjb25zdCBwYXJzZUtleU9wdGlvbnMgPSAoa2V5T3JLZXlDb2RlOiBzdHJpbmcgfCBudW1iZXIgfCBLZXlib2FyZEV2ZW50T3B0aW9ucyk6IEtleU9wdGlvbnMgPT4ge1xuICBpZiAoaXNOdW1iZXIoa2V5T3JLZXlDb2RlKSAmJiBrZXlPcktleUNvZGUpIHtcbiAgICByZXR1cm4geyBrZXk6IGZhbHNlLCBrZXlDb2RlOiBrZXlPcktleUNvZGUsIG1vZGlmaWVyczoge30gfTtcbiAgfVxuXG4gIGlmIChpc1N0cmluZyhrZXlPcktleUNvZGUpICYmIGtleU9yS2V5Q29kZSkge1xuICAgIHJldHVybiBwYXJzZUtleShrZXlPcktleUNvZGUgYXMgc3RyaW5nKTtcbiAgfVxuXG4gIGlmIChpc09iamVjdChrZXlPcktleUNvZGUpKSB7XG4gICAgY29uc3QgcGFyc2VkS2V5ID0gcGFyc2VLZXkoa2V5T3JLZXlDb2RlLmtleSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4ucGFyc2VkS2V5LFxuICAgICAga2V5Q29kZToga2V5T3JLZXlDb2RlLmtleUNvZGVcbiAgICB9O1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdrZXlib2FyZC5wcmVzc0tleSgpIHJlcXVpcmVzIGEgdmFsaWQga2V5IG9yIGtleUNvZGUnKTtcbn07XG5cbmNvbnN0IHBhcnNlS2V5ID0gKGtleVN0cjogc3RyaW5nKTogS2V5T3B0aW9ucyA9PiB7XG4gIGlmIChrZXlTdHIuaW5kZXhPZignLicpIDwgMCB8fCAnLicgPT09IGtleVN0cikge1xuICAgIHJldHVybiB7IGtleToga2V5U3RyLCBrZXlDb2RlOiBmYWxzZSwgbW9kaWZpZXJzOiB7fSB9O1xuICB9XG5cbiAgY29uc3Qga2V5UGFydHMgPSBrZXlTdHIuc3BsaXQoJy4nKTtcbiAgY29uc3Qga2V5ID0ga2V5UGFydHMucG9wKCkgYXMgc3RyaW5nO1xuICBjb25zdCBtb2RpZmllcnMgPSBrZXlQYXJ0cy5yZWR1Y2UoXG4gICAgKG1vZHMsIHBhcnQpID0+IHtcbiAgICAgIHN3aXRjaCAocGFydCkge1xuICAgICAgICBjYXNlICdjb250cm9sJzpcbiAgICAgICAgY2FzZSAnY3RybCc6XG4gICAgICAgICAgbW9kcy5jb250cm9sID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBtb2RzO1xuICAgICAgICBjYXNlICdzaGlmdCc6XG4gICAgICAgICAgbW9kcy5zaGlmdCA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbW9kcztcbiAgICAgICAgY2FzZSAnYWx0JzpcbiAgICAgICAgICBtb2RzLmFsdCA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbW9kcztcbiAgICAgICAgY2FzZSAnbWV0YSc6XG4gICAgICAgIGNhc2UgJ2NtZCc6XG4gICAgICAgIGNhc2UgJ3dpbic6XG4gICAgICAgICAgbW9kcy5tZXRhID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBtb2RzO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBrZXkgbW9kaWZpZXI6ICR7cGFydCA/IHBhcnQgOiAndW5kZWZpbmVkJ30sIGtleVN0cjogJHtrZXlTdHJ9YCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB7IGFsdDogZmFsc2UsIGNvbnRyb2w6IGZhbHNlLCBzaGlmdDogZmFsc2UsIG1ldGE6IGZhbHNlIH1cbiAgKTtcblxuICByZXR1cm4geyBrZXksIGtleUNvZGU6IGZhbHNlLCBtb2RpZmllcnMgfTtcbn07XG4iXX0=