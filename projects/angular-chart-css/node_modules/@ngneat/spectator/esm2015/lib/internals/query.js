import { SimpleChange } from '@angular/core';
import { By } from '@angular/platform-browser';
import { DOMSelector } from '../dom-selectors';
import { isString } from '../types';
export function getChildren(debugElementRoot) {
    return (directiveOrSelector, options = { root: false, read: undefined }) => {
        if (directiveOrSelector instanceof DOMSelector) {
            return directiveOrSelector.execute(debugElementRoot.nativeElement);
        }
        const debugElements = debugElementRoot.queryAll(isString(directiveOrSelector) ? By.css(directiveOrSelector) : By.directive(directiveOrSelector));
        if (options.read) {
            return debugElements.map(debug => debug.injector.get(options.read));
        }
        if (isString(directiveOrSelector)) {
            return debugElements.map(debug => debug.nativeElement);
        }
        return debugElements.map(debug => debug.injector.get(directiveOrSelector));
    };
}
export function setProps(instance, keyOrKeyValues, value, firstChange = true) {
    var _a;
    const changes = {};
    const update = (key, newValue) => {
        if (instance[key] !== newValue) {
            changes[key] = new SimpleChange(instance[key], newValue, firstChange);
        }
        instance[key] = newValue;
    };
    if (isString(keyOrKeyValues)) {
        update(keyOrKeyValues, value);
    }
    else {
        // tslint:disable-next-line:forin
        for (const p in keyOrKeyValues) {
            update(p, keyOrKeyValues[p]);
        }
    }
    if (Object.keys(changes).length) {
        // tslint:disable-next-line:no-life-cycle-call
        (_a = instance.ngOnChanges) === null || _a === void 0 ? void 0 : _a.call(instance, changes);
    }
    return instance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcGVjdGF0b3Ivc3JjL2xpYi9pbnRlcm5hbHMvcXVlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFnQixZQUFZLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBMkIsTUFBTSxVQUFVLENBQUM7QUFFN0QsTUFBTSxVQUFVLFdBQVcsQ0FBSSxnQkFBOEI7SUFDM0QsT0FBTyxDQUFDLG1CQUE4QixFQUFFLFVBQTJCLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEVBQU8sRUFBRTtRQUMxRyxJQUFJLG1CQUFtQixZQUFZLFdBQVcsRUFBRTtZQUM5QyxPQUFPLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQVUsQ0FBQztTQUM3RTtRQUVELE1BQU0sYUFBYSxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FDN0MsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUNoRyxDQUFDO1FBRUYsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ2hCLE9BQU8sYUFBYSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3JFO1FBRUQsSUFBSSxRQUFRLENBQUMsbUJBQW1CLENBQUMsRUFBRTtZQUNqQyxPQUFPLGFBQWEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDeEQ7UUFFRCxPQUFPLGFBQWEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQVNELE1BQU0sVUFBVSxRQUFRLENBQUMsUUFBYSxFQUFFLGNBQW1CLEVBQUUsS0FBVyxFQUFFLGNBQXVCLElBQUk7O0lBQ25HLE1BQU0sT0FBTyxHQUFrQixFQUFFLENBQUM7SUFFbEMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFXLEVBQUUsUUFBYSxFQUFRLEVBQUU7UUFDbEQsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxFQUFFO1lBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ3ZFO1FBRUQsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDLENBQUM7SUFFRixJQUFJLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRTtRQUM1QixNQUFNLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQy9CO1NBQU07UUFDTCxpQ0FBaUM7UUFDakMsS0FBSyxNQUFNLENBQUMsSUFBSSxjQUFjLEVBQUU7WUFDOUIsTUFBTSxDQUFDLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM5QjtLQUNGO0lBRUQsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRTtRQUMvQiw4Q0FBOEM7UUFDOUMsTUFBQSxRQUFRLENBQUMsV0FBVywrQ0FBcEIsUUFBUSxFQUFlLE9BQU8sRUFBRTtLQUNqQztJQUVELE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWJ1Z0VsZW1lbnQsIFNpbXBsZUNoYW5nZSwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnkgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuaW1wb3J0IHsgRE9NU2VsZWN0b3IgfSBmcm9tICcuLi9kb20tc2VsZWN0b3JzJztcbmltcG9ydCB7IGlzU3RyaW5nLCBRdWVyeU9wdGlvbnMsIFF1ZXJ5VHlwZSB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENoaWxkcmVuPFI+KGRlYnVnRWxlbWVudFJvb3Q6IERlYnVnRWxlbWVudCk6IChkaXJlY3RpdmVPclNlbGVjdG9yOiBRdWVyeVR5cGUsIG9wdGlvbnM/OiBRdWVyeU9wdGlvbnM8Uj4pID0+IFJbXSB7XG4gIHJldHVybiAoZGlyZWN0aXZlT3JTZWxlY3RvcjogUXVlcnlUeXBlLCBvcHRpb25zOiBRdWVyeU9wdGlvbnM8Uj4gPSB7IHJvb3Q6IGZhbHNlLCByZWFkOiB1bmRlZmluZWQgfSk6IFJbXSA9PiB7XG4gICAgaWYgKGRpcmVjdGl2ZU9yU2VsZWN0b3IgaW5zdGFuY2VvZiBET01TZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIGRpcmVjdGl2ZU9yU2VsZWN0b3IuZXhlY3V0ZShkZWJ1Z0VsZW1lbnRSb290Lm5hdGl2ZUVsZW1lbnQpIGFzIGFueVtdO1xuICAgIH1cblxuICAgIGNvbnN0IGRlYnVnRWxlbWVudHMgPSBkZWJ1Z0VsZW1lbnRSb290LnF1ZXJ5QWxsKFxuICAgICAgaXNTdHJpbmcoZGlyZWN0aXZlT3JTZWxlY3RvcikgPyBCeS5jc3MoZGlyZWN0aXZlT3JTZWxlY3RvcikgOiBCeS5kaXJlY3RpdmUoZGlyZWN0aXZlT3JTZWxlY3RvcilcbiAgICApO1xuXG4gICAgaWYgKG9wdGlvbnMucmVhZCkge1xuICAgICAgcmV0dXJuIGRlYnVnRWxlbWVudHMubWFwKGRlYnVnID0+IGRlYnVnLmluamVjdG9yLmdldChvcHRpb25zLnJlYWQpKTtcbiAgICB9XG5cbiAgICBpZiAoaXNTdHJpbmcoZGlyZWN0aXZlT3JTZWxlY3RvcikpIHtcbiAgICAgIHJldHVybiBkZWJ1Z0VsZW1lbnRzLm1hcChkZWJ1ZyA9PiBkZWJ1Zy5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVidWdFbGVtZW50cy5tYXAoZGVidWcgPT4gZGVidWcuaW5qZWN0b3IuZ2V0KGRpcmVjdGl2ZU9yU2VsZWN0b3IpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFByb3BzPFQsIEsgZXh0ZW5kcyBzdHJpbmcgfCBudW1iZXIgfCBzeW1ib2wsIFY+KFxuICBpbnN0YW5jZTogVCxcbiAga2V5OiBLLFxuICB2YWx1ZTogVixcbiAgZmlyc3RDaGFuZ2U/OiBib29sZWFuXG4pOiBUICYgeyBbS0VZIGluIEtdOiBWIH07XG5leHBvcnQgZnVuY3Rpb24gc2V0UHJvcHM8VCwgS1Y+KGluc3RhbmNlOiBULCBrZXlWYWx1ZXM/OiBLVik6IFQgJiBLVjtcbmV4cG9ydCBmdW5jdGlvbiBzZXRQcm9wcyhpbnN0YW5jZTogYW55LCBrZXlPcktleVZhbHVlczogYW55LCB2YWx1ZT86IGFueSwgZmlyc3RDaGFuZ2U6IGJvb2xlYW4gPSB0cnVlKTogYW55IHtcbiAgY29uc3QgY2hhbmdlczogU2ltcGxlQ2hhbmdlcyA9IHt9O1xuXG4gIGNvbnN0IHVwZGF0ZSA9IChrZXk6IHN0cmluZywgbmV3VmFsdWU6IGFueSk6IHZvaWQgPT4ge1xuICAgIGlmIChpbnN0YW5jZVtrZXldICE9PSBuZXdWYWx1ZSkge1xuICAgICAgY2hhbmdlc1trZXldID0gbmV3IFNpbXBsZUNoYW5nZShpbnN0YW5jZVtrZXldLCBuZXdWYWx1ZSwgZmlyc3RDaGFuZ2UpO1xuICAgIH1cblxuICAgIGluc3RhbmNlW2tleV0gPSBuZXdWYWx1ZTtcbiAgfTtcblxuICBpZiAoaXNTdHJpbmcoa2V5T3JLZXlWYWx1ZXMpKSB7XG4gICAgdXBkYXRlKGtleU9yS2V5VmFsdWVzLCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmZvcmluXG4gICAgZm9yIChjb25zdCBwIGluIGtleU9yS2V5VmFsdWVzKSB7XG4gICAgICB1cGRhdGUocCwga2V5T3JLZXlWYWx1ZXNbcF0pO1xuICAgIH1cbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyhjaGFuZ2VzKS5sZW5ndGgpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tbGlmZS1jeWNsZS1jYWxsXG4gICAgaW5zdGFuY2UubmdPbkNoYW5nZXM/LihjaGFuZ2VzKTtcbiAgfVxuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cbiJdfQ==