/**
 * @internal
 */
export function installProtoMethods(mock, proto, createSpyFn) {
    if (proto === null || proto === Object.prototype) {
        return;
    }
    for (const key of Object.getOwnPropertyNames(proto)) {
        const descriptor = Object.getOwnPropertyDescriptor(proto, key);
        if (!descriptor) {
            continue;
        }
        if (typeof descriptor.value === 'function' && key !== 'constructor' && typeof mock[key] === 'undefined') {
            mock[key] = createSpyFn(key);
        }
        else if (descriptor.get && !mock.hasOwnProperty(key)) {
            Object.defineProperty(mock, key, {
                set: value => (mock[`_${key}`] = value),
                get: () => mock[`_${key}`],
                configurable: true
            });
        }
    }
    installProtoMethods(mock, Object.getPrototypeOf(proto), createSpyFn);
    mock.castToWritable = () => mock;
}
/**
 * @publicApi
 */
export function createSpyObject(type, template) {
    const mock = Object.assign({}, template) || {};
    installProtoMethods(mock, type.prototype, name => {
        const newSpy = jasmine.createSpy(name);
        newSpy.andCallFake = (fn) => newSpy.and.callFake(fn);
        newSpy.andReturn = val => newSpy.and.returnValue(val);
        newSpy.reset = () => newSpy.calls.reset();
        // revisit return null here (previously needed for rtts_assert).
        newSpy.and.returnValue(null);
        return newSpy;
    });
    return mock;
}
/**
 * @publicApi
 */
export function mockProvider(type, properties) {
    return {
        provide: type,
        useFactory: () => createSpyObject(type, properties)
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3NwZWN0YXRvci9zcmMvbGliL21vY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0NBOztHQUVHO0FBQ0gsTUFBTSxVQUFVLG1CQUFtQixDQUFJLElBQVMsRUFBRSxLQUFVLEVBQUUsV0FBcUI7SUFDakYsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxNQUFNLENBQUMsU0FBUyxFQUFFO1FBQ2hELE9BQU87S0FDUjtJQUVELEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ25ELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFL0QsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLFNBQVM7U0FDVjtRQUVELElBQUksT0FBTyxVQUFVLENBQUMsS0FBSyxLQUFLLFVBQVUsSUFBSSxHQUFHLEtBQUssYUFBYSxJQUFJLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFdBQVcsRUFBRTtZQUN2RyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzlCO2FBQU0sSUFBSSxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN0RCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUU7Z0JBQy9CLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQ3ZDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztnQkFDMUIsWUFBWSxFQUFFLElBQUk7YUFDbkIsQ0FBQyxDQUFDO1NBQ0o7S0FDRjtJQUVELG1CQUFtQixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRXJFLElBQUksQ0FBQyxjQUFjLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO0FBQ25DLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQUksSUFBK0IsRUFBRSxRQUF3QztJQUMxRyxNQUFNLElBQUksR0FBUSxrQkFBSyxRQUFRLEtBQU0sRUFBRSxDQUFDO0lBRXhDLG1CQUFtQixDQUFJLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFO1FBQ2xELE1BQU0sTUFBTSxHQUF5QyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdFLE1BQU0sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxFQUEyQixFQUFFLEVBQUUsQ0FBTSxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNuRixNQUFNLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEQsTUFBTSxDQUFDLEtBQUssR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzFDLGdFQUFnRTtRQUNoRSxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU3QixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBSSxJQUErQixFQUFFLFVBQTBDO0lBQ3pHLE9BQU87UUFDTCxPQUFPLEVBQUUsSUFBSTtRQUNiLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQztLQUNwRCxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDcmVkaXQ6IFZhbGVudGluIEJ1cnlha292ICovXG5pbXBvcnQgeyBGYWN0b3J5UHJvdmlkZXIsIFR5cGUsIEFic3RyYWN0VHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG50eXBlIFdyaXRhYmxlPFQ+ID0geyAtcmVhZG9ubHkgW1AgaW4ga2V5b2YgVF06IFRbUF0gfTtcblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGF0aWJsZVNweSBleHRlbmRzIGphc21pbmUuU3B5IHtcbiAgLyoqXG4gICAqIEJ5IGNoYWluaW5nIHRoZSBzcHkgd2l0aCBhbmQucmV0dXJuVmFsdWUsIGFsbCBjYWxscyB0byB0aGUgZnVuY3Rpb24gd2lsbCByZXR1cm4gYSBzcGVjaWZpY1xuICAgKiB2YWx1ZS5cbiAgICovXG4gIGFuZFJldHVybih2YWw6IGFueSk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEJ5IGNoYWluaW5nIHRoZSBzcHkgd2l0aCBhbmQuY2FsbEZha2UsIGFsbCBjYWxscyB0byB0aGUgc3B5IHdpbGwgZGVsZWdhdGUgdG8gdGhlIHN1cHBsaWVkXG4gICAqIGZ1bmN0aW9uLlxuICAgKi9cbiAgYW5kQ2FsbEZha2UoZm46IEZ1bmN0aW9uKTogdGhpcztcblxuICAvKipcbiAgICogcmVtb3ZlcyBhbGwgcmVjb3JkZWQgY2FsbHNcbiAgICovXG4gIHJlc2V0KCk6IHZvaWQ7XG59XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgdHlwZSBTcHlPYmplY3Q8VD4gPSBUICZcbiAgeyBbUCBpbiBrZXlvZiBUXTogVFtQXSBleHRlbmRzIEZ1bmN0aW9uID8gVFtQXSAmIENvbXBhdGlibGVTcHkgOiBUW1BdIH0gJiB7XG4gICAgLyoqXG4gICAgICogQ2FzdHMgdG8gdHlwZSB3aXRob3V0IHJlYWRvbmx5IHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjYXN0VG9Xcml0YWJsZSgpOiBXcml0YWJsZTxUPjtcbiAgfTtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGxQcm90b01ldGhvZHM8VD4obW9jazogYW55LCBwcm90bzogYW55LCBjcmVhdGVTcHlGbjogRnVuY3Rpb24pOiB2b2lkIHtcbiAgaWYgKHByb3RvID09PSBudWxsIHx8IHByb3RvID09PSBPYmplY3QucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocHJvdG8pKSB7XG4gICAgY29uc3QgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG8sIGtleSk7XG5cbiAgICBpZiAoIWRlc2NyaXB0b3IpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZGVzY3JpcHRvci52YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBrZXkgIT09ICdjb25zdHJ1Y3RvcicgJiYgdHlwZW9mIG1vY2tba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG1vY2tba2V5XSA9IGNyZWF0ZVNweUZuKGtleSk7XG4gICAgfSBlbHNlIGlmIChkZXNjcmlwdG9yLmdldCAmJiAhbW9jay5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9jaywga2V5LCB7XG4gICAgICAgIHNldDogdmFsdWUgPT4gKG1vY2tbYF8ke2tleX1gXSA9IHZhbHVlKSxcbiAgICAgICAgZ2V0OiAoKSA9PiBtb2NrW2BfJHtrZXl9YF0sXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgaW5zdGFsbFByb3RvTWV0aG9kcyhtb2NrLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pLCBjcmVhdGVTcHlGbik7XG5cbiAgbW9jay5jYXN0VG9Xcml0YWJsZSA9ICgpID0+IG1vY2s7XG59XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3B5T2JqZWN0PFQ+KHR5cGU6IFR5cGU8VD4gfCBBYnN0cmFjdFR5cGU8VD4sIHRlbXBsYXRlPzogUGFydGlhbDxSZWNvcmQ8a2V5b2YgVCwgYW55Pj4pOiBTcHlPYmplY3Q8VD4ge1xuICBjb25zdCBtb2NrOiBhbnkgPSB7IC4uLnRlbXBsYXRlIH0gfHwge307XG5cbiAgaW5zdGFsbFByb3RvTWV0aG9kczxUPihtb2NrLCB0eXBlLnByb3RvdHlwZSwgbmFtZSA9PiB7XG4gICAgY29uc3QgbmV3U3B5OiBqYXNtaW5lLlNweSAmIFBhcnRpYWw8Q29tcGF0aWJsZVNweT4gPSBqYXNtaW5lLmNyZWF0ZVNweShuYW1lKTtcbiAgICBuZXdTcHkuYW5kQ2FsbEZha2UgPSAoZm46ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55KSA9PiA8YW55Pm5ld1NweS5hbmQuY2FsbEZha2UoZm4pO1xuICAgIG5ld1NweS5hbmRSZXR1cm4gPSB2YWwgPT4gbmV3U3B5LmFuZC5yZXR1cm5WYWx1ZSh2YWwpO1xuICAgIG5ld1NweS5yZXNldCA9ICgpID0+IG5ld1NweS5jYWxscy5yZXNldCgpO1xuICAgIC8vIHJldmlzaXQgcmV0dXJuIG51bGwgaGVyZSAocHJldmlvdXNseSBuZWVkZWQgZm9yIHJ0dHNfYXNzZXJ0KS5cbiAgICBuZXdTcHkuYW5kLnJldHVyblZhbHVlKG51bGwpO1xuXG4gICAgcmV0dXJuIG5ld1NweTtcbiAgfSk7XG5cbiAgcmV0dXJuIG1vY2s7XG59XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZnVuY3Rpb24gbW9ja1Byb3ZpZGVyPFQ+KHR5cGU6IFR5cGU8VD4gfCBBYnN0cmFjdFR5cGU8VD4sIHByb3BlcnRpZXM/OiBQYXJ0aWFsPFJlY29yZDxrZXlvZiBULCBhbnk+Pik6IEZhY3RvcnlQcm92aWRlciB7XG4gIHJldHVybiB7XG4gICAgcHJvdmlkZTogdHlwZSxcbiAgICB1c2VGYWN0b3J5OiAoKSA9PiBjcmVhdGVTcHlPYmplY3QodHlwZSwgcHJvcGVydGllcylcbiAgfTtcbn1cblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCB0eXBlIE1vY2tQcm92aWRlciA9IHR5cGVvZiBtb2NrUHJvdmlkZXI7XG4iXX0=