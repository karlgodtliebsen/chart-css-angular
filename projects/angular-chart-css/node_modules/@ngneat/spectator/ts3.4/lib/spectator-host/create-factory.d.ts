import { Type } from '@angular/core';
import { SpectatorOverrides } from '../spectator/create-factory';
import { HostComponent } from './host-component';
import { SpectatorHostOptions } from './options';
import { SpectatorHost } from './spectator-host';
/**
 * @publicApi
 */
export declare type SpectatorHostFactory<C, H> = <HP>(template: string, overrides?: SpectatorHostOverrides<C, H, HP>) => SpectatorHost<C, H & (HostComponent extends H ? HP : unknown)>;
/**
 * @publicApi
 */
export declare type PresetSpectatorHostFactory<C, H> = <HP>(template?: string, overrides?: SpectatorHostOverrides<C, H, HP>) => SpectatorHost<C, H & (HostComponent extends H ? HP : unknown)>;
/**
 * @publicApi
 */
export interface SpectatorHostOverrides<C, H, HP> extends SpectatorOverrides<C> {
    hostProps?: HostComponent extends H ? HP : Partial<H>;
}
/**
 * @publicApi
 */
export declare function createHostFactory<C, H = HostComponent>(options: SpectatorHostOptions<C, H> & {
    template: string;
}): PresetSpectatorHostFactory<C, H>;
/**
 * @publicApi
 */
export declare function createHostFactory<C, H = HostComponent>(typeOrOptions: Type<C> | SpectatorHostOptions<C, H>): SpectatorHostFactory<C, H>;
