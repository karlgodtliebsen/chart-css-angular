import { DebugElement, Type } from '@angular/core';
import { ComponentFixture } from '@angular/core/testing';
import { DOMSelector } from '../dom-selectors';
import { Spectator } from '../spectator/spectator';
import { Token } from '../token';
import { HostComponent } from './host-component';
/**
 * @publicApi
 */
export declare class SpectatorHost<C, H = HostComponent> extends Spectator<C> {
    hostComponent: H;
    hostDebugElement: DebugElement;
    hostElement: Element;
    hostFixture: ComponentFixture<any>;
    debugElement: DebugElement;
    element: HTMLElement;
    constructor(hostComponent: H, hostDebugElement: DebugElement, hostElement: Element, hostFixture: ComponentFixture<any>, debugElement: DebugElement, componentInstance: C, element: HTMLElement);
    queryHost<R extends Element>(selector: string | DOMSelector, options?: {
        root: boolean;
    }): R | null;
    queryHost<R>(directive: Type<R>): R | null;
    queryHost<R>(directiveOrSelector: Type<any> | string, options: {
        read: Token<R>;
    }): R | null;
    queryHostAll<R extends Element>(selector: string | DOMSelector, options?: {
        root: boolean;
    }): R[];
    queryHostAll<R>(directive: Type<R>): R[];
    queryHostAll<R>(directiveOrSelector: Type<any> | string, options: {
        read: Token<R>;
    }): R[];
    setHostInput<K extends keyof H>(input: Partial<H>): void;
    setHostInput<K extends keyof H>(input: K, inputValue: H[K]): void;
}
