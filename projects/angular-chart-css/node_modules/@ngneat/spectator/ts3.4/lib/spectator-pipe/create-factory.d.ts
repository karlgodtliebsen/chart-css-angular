import { Type } from '@angular/core';
import { BaseSpectatorOverrides } from '../base/options';
import { HostComponent } from '../spectator-host/host-component';
import { SpectatorPipeOptions } from './options';
import { SpectatorPipe } from './spectator-pipe';
/**
 * @publicApi
 */
export declare type SpectatorPipeFactory<P, H> = <HP>(templateOrOverrides?: string | SpectatorPipeOverrides<H, HP>, overrides?: SpectatorPipeOverrides<H, HP>) => SpectatorPipe<P, H & (HostComponent extends H ? HP : unknown)>;
/**
 * @publicApi
 */
export interface SpectatorPipeOverrides<H, HP> extends BaseSpectatorOverrides {
    detectChanges?: boolean;
    hostProps?: HostComponent extends H ? HP : Partial<H>;
}
/**
 * @publicApi
 */
export declare function createPipeFactory<P, H = HostComponent>(typeOrOptions: Type<P> | SpectatorPipeOptions<P, H>): SpectatorPipeFactory<P, H>;
