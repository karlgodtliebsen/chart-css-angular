import { DebugElement, ElementRef, Type, EventEmitter, OnDestroy } from '@angular/core';
import { DOMSelector } from './dom-selectors';
import { Token } from './token';
declare type OptionalPropertyNames<T> = {
    [K in keyof T]-?: undefined extends T[K] ? K : never;
}[keyof T];
declare type OptionalProperties<T> = Pick<T, OptionalPropertyNames<T>>;
export declare type OptionalsRequired<T> = Required<OptionalProperties<T>> & Partial<T>;
export declare type SpectatorElement = string | Element | DebugElement | ElementRef | Window | Document | DOMSelector;
export declare type QueryType = Type<any> | DOMSelector | string;
export interface QueryOptions<R> {
    read?: Token<R>;
    root?: boolean;
}
export declare type EventEmitterType<P> = P extends EventEmitter<infer T> ? T : never;
export declare type KeysMatching<T, V> = {
    [K in keyof T]: T[K] extends V ? K : never;
}[keyof T];
export declare type SelectOptions = string | string[] | HTMLOptionElement | HTMLOptionElement[];
export interface KeyboardEventOptions {
    key: string;
    keyCode: number;
}
export declare function doesServiceImplementsOnDestroy<S>(testedService: S): testedService is S & OnDestroy;
export declare function isString(value: any): value is string;
export declare function isNumber(value: any): value is number;
export declare function isType(v: any): v is Type<any>;
export declare function isHTMLOptionElementArray(value: any): value is HTMLOptionElement[];
export declare function isObject(v: any): v is object;
export {};
